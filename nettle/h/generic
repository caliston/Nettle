/**
 * Generic useful headers
 * (C) Nettle developers 2000-2001
 *
 * $Id$
 */

#ifndef GENERIC_H
#define GENERIC_H

/* Include fortify.h (Debugging) */
#include "fortify.h"

typedef enum
{
  false = 0, true = 1
} bool;

/* Standard includes */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

/* RISC OS includes */
#include "kernel.h"
#include "swis.h"

#ifdef __GNUC__

/* something's a bit broken with var args and gcc just now. */
/* This is a temporary fix.  (ijeffray)  */

typedef char *va_list;

#define va_align(x)	(((x) + (sizeof(int) - 1)) & (~(sizeof(int) - 1)))

#define va_start(a,p)	((void)((a) = ((char *)(&(p)) + va_align(sizeof(p)))))
#define va_arg(a,t)	((sizeof(t) > sizeof(int)) ? \
	*(t *)(((a) += va_align(sizeof(t))) - va_align(sizeof(t))) : \
	(t)(*(int *)(((a) += sizeof(int)) - sizeof(int))))
#define va_end(a)	((void)((a) = (char *)-1))


/* we also want _swi ... and until that's added to libscl, we'll do this... */
/* actually, this is used when we're using !CLib, too, as that swi.h is broken */

#undef _IN
#undef _INR
#undef _OUT
#undef _OUTR

extern int _swi (int swi_no, unsigned int, ...);
extern _kernel_oserror *_swix (int swi_no, unsigned int, ...);
#define _FLAGS     0x10 /*use with _RETURN() or _OUT()*/
#define _IN(i)     (1U << (i))
#define _INR(i,j)  (~0 << (i) ^ ~0 << ((j) + 1))
#define _OUT(i)    ((i) != _FLAGS? (1U << (31 - (i))): (1U << 21))
#define _OUTR(i,j) (~0U >> (i) ^ ~0U >> ((j) + 1))
#define _BLOCK(i)  (1U << 11 | (unsigned) (i) << 12)
#define _RETURN(i) ((i) != _FLAGS? (unsigned) (i) << 16: 0xFU << 16)
#define _C         (1U << 29)
#define _Z         (1U << 30)
#define _N         (1U << 31)

#else
#include <stdarg.h>
#endif

/* Unions/Structs */

struct os_spriteop_area
{
  int total_size;
  int number_of_sprites;
  int offset_to_1st_sprite;
  int offset_to_1st_free_word;
  /* Remaining data */
};

struct wimp_closewindow_block
{
  int window_handle;
};

union icon_data
{
  struct
  {
    char text[12];
  } t;

  struct
  {
    char *text;
    char *validation;
    int text_len;
  } it;

  struct
  {
    char *sprite;
    struct os_spriteop_area *sprite_area;
    int sprite_len;
  } is;
};

struct wimp_createicon_block
{
  int window_handle;
  int minx;
  int miny;
  int maxx;
  int maxy;
  int icon_flags;
  union icon_data contents;
};

struct wimp_createwindow_block
{
  int minx;
  int miny;
  int maxx;
  int maxy;
  int scroll_x;
  int scroll_y;
  int handle_behind;
  int window_flags;
  unsigned char title_fg;
  unsigned char title_bg;
  unsigned char work_fg;
  unsigned char work_bg;
  unsigned char scroll_outer_colour;
  unsigned char scroll_inner_colour;
  unsigned char title_focus_colour;
  unsigned char flags;
  int work_minx;
  int work_miny;
  int work_maxx;
  int work_maxy;
  int icon_flags;
  int workarea_flags;
  int sprite_area;
  unsigned short min_width;
  unsigned short min_height;
  union icon_data title;
  int number_of_icons;
  /* Icon definitions follow... */
};

struct wimp_deleteicon_block
{
  int window_handle;
  int icon_handle;
};

struct wimp_deletewindow_block
{
  int window_handle;
};

struct wimp_dragbox_block
{
  int window_handle;
  int drag_type;
  int minx;
  int miny;
  int maxx;
  int maxy;
  int parent_minx;
  int parent_miny;
  int parent_maxx;
  int parent_maxy;
  int r12_value;

  /* Maybe... */
  int *drawbox_routine;
  int *removebox_routine;
  int *movebox_routine;
};

struct wimp_getcaretposition_block
{
  int window_handle;
  int icon_handle;
  int x;
  int y;
  int height_and_flags;
  int index;
};

struct wimp_geticonstate_block
{
  int window_handle;
  int icon_handle;
  int minx;
  int miny;
  int maxx;
  int maxy;
  int icon_flags;
  union icon_data contents;
};

struct wimp_getpointerinfo_block
{
  int x;
  int y;
  int buttons;
  int window_handle;
  int icon_handle;
};

struct wimp_getwindowinfo_block
{
  int window_handle;
  int minx;
  int miny;
  int maxx;
  int maxy;
  int scroll_x;
  int scroll_y;
  int handle_behind;
  int window_flags;
  unsigned char title_fg;
  unsigned char title_bg;
  unsigned char work_fg;
  unsigned char work_bg;
  unsigned char scroll_outer_colour;
  unsigned char scroll_inner_colour;
  unsigned char title_focus_colour;
  unsigned char flags;
  int work_minx;
  int work_miny;
  int work_maxx;
  int work_maxy;
  int icon_flags;
  int workarea_flags;
  int sprite_area;
  unsigned short min_width;
  unsigned short min_height;
  union icon_data title;
  int number_of_icons;
  /* Icon definitions follow... */
};

struct wimp_getwindowoutline_block
{
  int window_handle;
  int minx;
  int miny;
  int maxx;
  int maxy;
};

struct wimp_getwindowstate_block
{
  int window_handle;
  int minx;
  int miny;
  int maxx;
  int maxy;
  int scroll_x;
  int scroll_y;
  int handle_behind;
  int window_flags;
};

struct wimp_openwindow_block
{
  int window_handle;
  int minx;
  int miny;
  int maxx;
  int maxy;
  int scroll_x;
  int scroll_y;
  int handle_behind;
};

struct wimp_reporterror_block
{
  int errno;
  char errmess[252];
};

struct wimp_setextent_block
{
  int minx;
  int miny;
  int maxx;
  int maxy;
};

struct wimp_seticonstate_block
{
  int window_handle;
  int icon_handle;
  int eor;
  int clear;
};

#endif
