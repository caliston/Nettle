/**
 * Global variables header
 * (C) Nettle developers 2000-2001
 *
 * $Id$
 */

#ifndef GLOBALS_H
#define GLOBALS_H

#include "nettle.h"

#define MAX_TAB_NUMBER		32

#define min(x,y) ((x)<(y)?(x):(y))
#define max(x,y) ((x)>(y)?(x):(y))

extern const char *application_name;
extern const char *application_icon_name;
extern bool quit_flag;

extern char zap_font[256];
extern char zap_lowres_font[256];

extern int *zap_font_area;
extern int *zap_lowres_font_area;
extern struct zapredraw_block redraw;

extern int *zapredraw_area;
extern int zapredraw_area_number;
extern int size_of_zapredraw_area;

extern struct os_spriteop_area *sprite_area;
extern int messagetrans_area[4];
extern int *messagetrans_buffer;

extern int task_handle;
extern int iconbar_handle;

extern int win_info;
extern int win_choices;
extern int win_open;
extern int win_resize;
extern int win_save;
extern int menu_open;

extern bool logging;
extern bool line_editor;
extern bool pass_f12;
extern int line_editor_size;

struct session_struct
{
  struct session_struct *next;	/* next session in linked list */
  struct session_struct *prev;	/* previous session in linked list */
  int window_handle;		/* window handle */
  int pane_handle;		/* pane window handle */
  char *assigned_area;		/* data area for terminal */
  enum nettle_terminal terminal_type; /* terminal type */
  int xpos;			/* current x position */
  int ypos;			/* current y position */
  int terminal_size_x;		/* size of terminal in X */
  int terminal_size_y;		/* size of terminal in Y */
  int scrollback;		/* size of scrollback */
  int socket_handle;		/* socket handle (or task handle etc.) */
  char socket_host[256];	/* hostname */
  int socket_port;		/* port number */
  unsigned int socket_ip;	/* IP */
  char socket_state;		/* state of socket (see nettle.h for states) */
  char current_fg;		/* current foreground colour */
  char current_bg;		/* current background colour */
  int current_flags;		/* current flags */
  char *title;			/* titlebar contents */
  char escape_string[256];	/* Escape array */
  int escape_string_length;	/* length of escape array so far */
  signed char escape_state;	/* escape state (see nettle.h for states) */
  bool session_flags[256];	/* session flags (same as telnet options so far) */
  int scroll_start;		/* start of scroll area */
  int scroll_end;		/* end of scroll area */
  int other_session_flags;	/* other session flags (see nettle.h) */
  char connection_type;		/* connection type: telnet, ssh, etc. */

  int old_xpos;			/* old X position */
  int old_ypos;			/* old Y position */
  char old_current_fg;		/* old fg colour */
  char old_current_bg;		/* old bg colour */
  int old_current_flags;	/* old current flags */
  int old_other_session_flags;  /* old other session flags */
  char old_character_set;	/* old character set */
  char old_character_set_g0;	/* old character set G0 */
  char old_character_set_g1;	/* old character set G1 */
  char old_character_set_g2;	/* old character set G2 */
  char old_character_set_g3;	/* old character set G3 */

  char *line_editor_history;    /* line editor history */
  int line_editor_position;	/* current position in the line editor */
  int line_editor_total;	/* total number of items in the history */
  char line_editor_buffer[512]; /* line editor buffer */

  char character_set;		/* currently selected character set */
  char character_set_g0;	/* character set G0 */
  char character_set_g1;	/* character set G1 */
  char character_set_g2;	/* character set G2 */
  char character_set_g3;	/* character set G3 */

  int tabs[MAX_TAB_NUMBER];	/* tab positions */
  int number_of_tabs;		/* number of tabs */
};

extern struct session_struct *sessions;
extern struct session_struct *current_session;

extern bool selection_in_progress;
extern struct session_struct *selection_session;
extern int selection_start;
extern int selection_end;
extern int selection_adjust_dragging;

extern char terminal_name[8][6];

union wimp_poll_block
{
  struct
  {
    int window_handle;
  } redraw_window;

  struct
  {
    int window_handle;
    int minx;
    int miny;
    int maxx;
    int maxy;
    int scroll_x;
    int scroll_y;
    int handle_behind;
  } open_window;

  struct
  {
    int window_handle;
  } close_window;

  struct
  {
    int window_handle;
  } pointer_leaving_window;

  struct
  {
    int window_handle;
  } pointer_entering_window;

  struct
  {
    int x;
    int y;
    int buttons;
    int window_handle;
    int icon_handle;
  } mouse_click;

  struct
  {
    int minx;
    int miny;
    int maxx;
    int maxy;
  } user_drag_box;

  struct
  {
    int window_handle;
    int icon_handle;
    int x;
    int y;
    int height_and_flags;
    int index;
    int code;
  } key_pressed;

  struct
  {
    int menu[64];
  } menu_selection;

  struct
  {
    int window_handle;
    int minx;
    int miny;
    int maxx;
    int maxy;
    int scroll_x;
    int scroll_y;
    int handle_behind;
    int scroll_x_dir;
    int scroll_y_dir;
  } scroll_request;

  struct
  {
    int window_handle;
    int icon_handle;
    int x;
    int y;
    int height_and_flags;
    int index;
  } caret;

  struct
  {
    int *address_poll_word;
    int contents_poll_word;
  } pollword_non_zero;

  struct
  {
    int length;
    int sender_ref;
    int my_ref;
    int your_ref;
    int message_code;

    union
    {
      struct
      {
        int window_handle;
        int icon_handle;
        int x;
        int y;
        int size;
        int filetype;
        char file_name[212];
      } data_save;

      struct
      {
        int window_handle;
        int icon_handle;
        int x;
        int y;
        int size;
        int filetype;
        char file_name[212];
      } data_save_ack;

      struct
      {
        int size;
        char data[232];
      } task_window_input;

      struct
      {
        int size;
        char data[232];
      } task_window_output;

      struct
      {
        int txt_handle;
      } task_window_ego;

    } contents;

  } user_message;

};

extern union wimp_poll_block wimp_block;

#endif
