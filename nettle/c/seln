/**
 * Selection code
 * (C) Nettle developers 2000-2001
 *
 * $Id$
 */

#include "generic.h"
#include "globals.h"

#include "messages.h"
#include "misc.h"
#include "nettle.h"
#include "seln.h"
#include "socket.h"
#include "wimp.h"
#include "zapredraw.h"

static const struct session_struct *old_session;
static int old_start, old_end;


static void selection_changedbox_init (void)
{
  old_session = selection_session;
  old_start = MIN(selection_start, selection_end);
  old_end   = MAX(selection_start, selection_end);
}


static void selection_changedbox_redraw (const struct session_struct *session, int start, int end)
{
  struct coords from, to;

  from.x = start % session->terminal_size.x;
  from.y = start / session->terminal_size.x;
  to.x   = end   % session->terminal_size.x;
  to.y   = end   / session->terminal_size.x;

  if (from.y == to.y)
  {
    /* redraw part of a line */
    force_redraw (session->window_handle,
                  from.x * redraw.r_charw << eig.x,
                  (-to.y - 1) * redraw.r_charh << eig.y,
                  (to.x+1)* redraw.r_charw << eig.x,
                  -to.y * redraw.r_charh << eig.y);
  }
  else
  {
    /* redraw whole lines */
    force_redraw (session->window_handle,
                  0, ((-to.y - 1) * redraw.r_charh) << eig.y,
                  session->terminal_size.x * redraw.r_charw << eig.x,
                  -from.y * redraw.r_charh << eig.y);
  }
}


static void selection_changedbox_draw (void)
{
  int new_start = MIN(selection_start, selection_end);
  int new_end   = MAX(selection_start, selection_end);

  if (old_session != selection_session || old_start == old_end)
    selection_changedbox_redraw (selection_session, new_start, new_end);
  else
  {
    if (new_start < old_start)
      selection_changedbox_redraw (selection_session, new_start, old_start);
    else if (new_start > old_start)
      selection_changedbox_redraw (selection_session, old_start, new_start);

    if (new_end < old_end)
      selection_changedbox_redraw (selection_session, new_end, old_end);
    else if (new_end > old_end)
      selection_changedbox_redraw (selection_session, old_end, new_end);
  }
}


void refresh_selection_set(void)
{
  if (selection_session)
  {
    int loop;
    if (selection_start>selection_end)
    {
      for (loop=selection_end; loop<selection_start; loop++)
      {
	write_assigned_flags(selection_session, loop*4,
			     read_assigned_flags(selection_session, loop*4) |
			     NETTLE_FLAG_SELECTED);
      }
    }
    else
    {
      for (loop=selection_start; loop<selection_end; loop++)
      {
	write_assigned_flags(selection_session, loop*4,
			     read_assigned_flags(selection_session, loop*4) |
			     NETTLE_FLAG_SELECTED);
      }
    }
  }
}

void refresh_selection_clear(void)
{
  if (selection_session)
  {
    int loop;
    if (selection_start>selection_end)
    {
      for (loop=selection_end; loop<selection_start; loop++)
      {
	write_assigned_flags(selection_session, loop*4,
			     read_assigned_flags(selection_session, loop*4) &
			     ~NETTLE_FLAG_SELECTED);
      }
    }
    else
    {
      for (loop=selection_start; loop<selection_end; loop++)
      {
	write_assigned_flags(selection_session, loop*4,
			     read_assigned_flags(selection_session, loop*4) &
			     ~NETTLE_FLAG_SELECTED);
      }
    }
  }
}

void selection_adjust(int x,int x_pos, int y, int y_pos)
{
  if (selection_session)
  {
    int click_point = -( ( (y - y_pos) >> eig.y ) / redraw.r_charh )
                      * selection_session->terminal_size.x
                      + ( ( (x - x_pos) >> eig.x ) / redraw.r_charw );

    if (click_point<0)
    {
      click_point=0;
    }
    if (click_point>(selection_session->terminal_size.x*
				(selection_session->terminal_size.y+
					selection_session->scrollback)))
    {
      click_point=(selection_session->terminal_size.x*
				(selection_session->terminal_size.y+
					selection_session->scrollback));
    }

    selection_changedbox_init();
    refresh_selection_clear();

    if (click_point<selection_start)
    {
      if (click_point<selection_end && selection_start<selection_end)
      {
	selection_start=click_point;
	selection_adjust_dragging=SELECTION_ADJUST_START;
      }
      else
      {
	selection_end=click_point;
	selection_adjust_dragging=SELECTION_ADJUST_END;
      }
    }
    else
    {
      if (click_point>selection_end && selection_start>selection_end)
      {
	selection_start=click_point;
	selection_adjust_dragging=SELECTION_ADJUST_START;
      }
      else
      {
	selection_end=click_point;
	selection_adjust_dragging=SELECTION_ADJUST_END;
      }
    }
    refresh_selection_set();
    selection_changedbox_draw();
  }
}

static void selection_adjust_drag(int x,int x_pos, int y, int y_pos)
{
  if (selection_session)
  {
    int click_point = -( ( (y - y_pos) >> eig.y ) / redraw.r_charh )
                      * selection_session->terminal_size.x
                      + ( ( (x - x_pos) >> eig.x ) / redraw.r_charw );

    if (click_point<0)
    {
      click_point=0;
    }
    if (click_point>(selection_session->terminal_size.x*
				(selection_session->terminal_size.y+
					selection_session->scrollback)))
    {
      click_point=(selection_session->terminal_size.x*
				(selection_session->terminal_size.y+
					selection_session->scrollback));
    }

    selection_changedbox_init();
    refresh_selection_clear();

    switch (selection_adjust_dragging)
    {
      case SELECTION_ADJUST_START:
	selection_start=click_point;
	break;
      case SELECTION_ADJUST_END:
	selection_end=click_point;
	break;
    }

    refresh_selection_set();
    selection_changedbox_draw();
  }
}

void save_selection(char *filename, bool ansi_colour)
{
  FILE *file_handle;
  int loop;
  int current_fg=7;
  int current_bg=0;
  int was_inverted = 0;
  int loop_start;
  int loop_end;

  file_handle=fopen(filename,"wb");

  if (file_handle==NULL)
  {
    generror(lookup_static("nocreate"), false);
    return;
  }

  loop_start = MIN(selection_start, selection_end);
  loop_end   = MAX(selection_start, selection_end);

  for (loop=loop_start*4; loop<loop_end*4; loop+=4)
  {
    if (loop!=loop_start*4)
    {
      if ((loop % (selection_session->terminal_size.x*4))==0)
      {
	fputc('\n',file_handle);
      }
    }

    if (ansi_colour)
    {
      int inverted = read_assigned_flags(selection_session, loop) &
        NETTLE_FLAG_INVERTED;
      int new_fg = read_assigned_fg(selection_session,loop);
      int new_bg = read_assigned_bg(selection_session,loop);

      if (inverted && !was_inverted)
        fprintf(file_handle,"\x1B%s","7m");
      else if (was_inverted && !inverted)
        fprintf(file_handle,"\x1B%s","27m");
      was_inverted = inverted;

      if (new_fg != current_fg)
      {
	if (new_fg>7)
	  fprintf(file_handle, "\x1B" "1;3%cm", new_fg-8+48);
	else
	  fprintf(file_handle, "\x1B" "3%cm", new_fg+48);
	current_fg = new_fg;
      }

      if (new_bg != current_bg)
      {
	if (new_bg>7)
	  fprintf(file_handle,"\x1B" "1;4%cm", new_bg-8+48);
	else
	  fprintf(file_handle,"\x1B" "4%cm", new_bg+48);
	current_bg = new_bg;
      }
    }

    fputc(read_assigned_character(selection_session,loop),file_handle);
  }

  fclose(file_handle);

  misc_setfiletype(filename, 0xFFF);
}

void handle_selection_drag(void)
{
  int x, y, buttons, window_handle, icon_handle;
  int x_pos, y_pos;
  bool do_scroll;

  {
    struct wimp_getpointerinfo_block block;

    _swi(Wimp_GetPointerInfo, _IN(1), &block);

    x            =block.pos.x;
    y            =block.pos.y;
    buttons      =block.buttons;
    window_handle=block.window_handle;
    icon_handle  =block.icon_handle;
  }

  if (buttons==0)
  {
    if (selection_start==selection_end)
    {
      selection_session = NULL;
    }
    selection_in_progress=false;
    return;
  }

  {
    struct wimp_getwindowinfo_block block;

    block.window_handle=selection_session->window_handle;

    _swi(Wimp_GetWindowInfo, _IN(1), ((int) &block)+1);

    x_pos=block.min.x-block.scroll.x;
    y_pos=block.max.y-block.scroll.y;

    /* Scroll when selection happening and we're near the edge of the window */
    do_scroll = false;

    if (x<(block.min.x+32))
    {
      block.scroll.x-=(block.min.x+32-x);
      do_scroll = true;
    }

    if (x>(block.max.x-32))
    {
      block.scroll.x+=(x-block.max.x+32);
      do_scroll = true;
    }

    if (y<(block.min.y+32))
    {
      block.scroll.y-=(block.min.y+32-y);
      do_scroll = true;
    }

    if (y>(block.max.y-32))
    {
      block.scroll.y+=(y-block.max.y+32);
      do_scroll = true;
    }

    if (do_scroll)
    {
      _swi(Wimp_OpenWindow, _IN(1), &block);
    }
  }

  switch (buttons)
  {
    case 4:
      /* Drag SELECT - clear the selection, re-work it out, and set it again, then redraw */
      selection_changedbox_init();
      refresh_selection_clear();

      selection_end = -( ( (y - y_pos) >> eig.y ) / redraw.r_charh )
                      * selection_session->terminal_size.x
                      + ( ( (x - x_pos) >> eig.x ) / redraw.r_charw );

      if (selection_end>(selection_session->terminal_size.x*
				(selection_session->terminal_size.y+
					selection_session->scrollback)))
      {
	selection_end=(selection_session->terminal_size.x*
				(selection_session->terminal_size.y+
					selection_session->scrollback));
      }
      if (selection_end<0)
      {
	selection_end=0;
      }

      refresh_selection_set();
      selection_changedbox_draw();

      break;
    case 1:
      /* ADJUST dragging */
      selection_adjust_drag(x,x_pos,y,y_pos);
      break;
  }
}


void force_redraw_selection (void)
{
  if (selection_session)
  {
    old_session = 0;
    selection_changedbox_draw ();
  }
}



void selection_paste(void)
{
  char    buffer[1024];
  char   *bufferptr;
  int     loop_start;
  int     loop_end;
  int     loop;

  if (selection_session == NULL)
    return;

  loop_start = MIN(selection_start, selection_end);
  loop_end   = MAX(selection_start, selection_end);

  bufferptr = buffer;

  for (loop=loop_start*4; loop<loop_end*4; loop+=4)
  {
    if (loop!=loop_start*4)
    {
      if ((loop % (selection_session->terminal_size.x*4))==0)
      {
        *bufferptr++ = '\r';
        *bufferptr++ = '\n';
      }
    }

    *bufferptr++ = read_assigned_character(selection_session,loop);
    if (bufferptr - buffer >= sizeof(buffer) - 3)
    {
      /* less than three characters spare in the buffer, flush it */
      if (socket_senddata(selection_session->socket_handle,
                          buffer,
                          bufferptr - buffer) != bufferptr - buffer)
      {
        generror("Socket error writing selection", false);
        return;
      }
      bufferptr = buffer;
    }
  }

  /* flush any data left in the buffer */
  if (socket_senddata(selection_session->socket_handle,
                      buffer,
                      bufferptr - buffer) != bufferptr - buffer)
  {
    generror("Socket error writing selection", false);
    return;
  }
}
