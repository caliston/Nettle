/* Selection code */
/* by A. Macfarlane Smith */
/* (C) Archifishal Software 2001 */

#include "generic.h"
#include "globals.h"

#include "misc.h"
#include "nettle.h"
#include "seln.h"
#include "wimp.h"
#include "zapredraw.h"

void refresh_selection_set(void)
{
  if (selection_session!=-1)
  {
    int loop;
    if (selection_start>selection_end)
    {
      for (loop=selection_end; loop<selection_start; loop++)
      {
	write_assigned_flags(selection_session, loop*4,
			     read_assigned_flags(selection_session, loop*4) |
			     NETTLE_FLAG_SELECTED);
      }
    }
    else
    {
      for (loop=selection_start; loop<selection_end; loop++)
      {
	write_assigned_flags(selection_session, loop*4,
			     read_assigned_flags(selection_session, loop*4) |
			     NETTLE_FLAG_SELECTED);
      }
    }
  }
}

void refresh_selection_clear(void)
{
  if (selection_session!=-1)
  {
    int loop;
    if (selection_start>selection_end)
    {
      for (loop=selection_end; loop<selection_start; loop++)
      {
	write_assigned_flags(selection_session, loop*4,
			     read_assigned_flags(selection_session, loop*4) &
			     ~NETTLE_FLAG_SELECTED);
      }
    }
    else
    {
      for (loop=selection_start; loop<selection_end; loop++)
      {
	write_assigned_flags(selection_session, loop*4,
			     read_assigned_flags(selection_session, loop*4) &
			     ~NETTLE_FLAG_SELECTED);
      }
    }
  }
}

void selection_adjust(int x,int x_pos, int y, int y_pos)
{
  int zap_yeig=_swi(OS_ReadModeVariable, _IN(0)|_IN(1)|_RETURN(2), -1, 5);

  if (selection_session!=-1)
  {
    int click_point=((-((y-y_pos)/redraw.r_charh/2/zap_yeig))*
		session[selection_session].terminal_size_x)+((x-x_pos)/redraw.r_charw/2);

    if (click_point<0)
    {
      click_point=0;
    }
    if (click_point>(session[selection_session].terminal_size_x*
				(session[selection_session].terminal_size_y+
					session[selection_session].scrollback)))
    {
      click_point=(session[selection_session].terminal_size_x*
				(session[selection_session].terminal_size_y+
					session[selection_session].scrollback));
    }

    refresh_selection_clear();

    if (click_point<selection_start)
    {
      if (click_point<selection_end && selection_start<selection_end)
      {
	selection_start=click_point;
	selection_adjust_dragging=SELECTION_ADJUST_START;
      }
      else
      {
	selection_end=click_point;
	selection_adjust_dragging=SELECTION_ADJUST_END;
      }
    }
    else
    {
      if (click_point>selection_end && selection_start>selection_end)
      {
	selection_start=click_point;
	selection_adjust_dragging=SELECTION_ADJUST_START;
      }
      else
      {
	selection_end=click_point;
	selection_adjust_dragging=SELECTION_ADJUST_END;
      }
    }
    refresh_selection_set();

    force_redraw(session[selection_session].window_handle,0,
       (-session[selection_session].terminal_size_y-
	session[selection_session].scrollback)*
	redraw.r_charh*2*zap_yeig,
	      session[selection_session].terminal_size_x*redraw.r_charw*2,0);
  }
}

void selection_adjust_drag(int x,int x_pos, int y, int y_pos)
{
  int zap_yeig=_swi(OS_ReadModeVariable, _IN(0)|_IN(1)|_RETURN(2), -1, 5);

  if (selection_session!=-1)
  {
    int click_point=((-((y-y_pos)/redraw.r_charh/2/zap_yeig))*
		session[selection_session].terminal_size_x)+((x-x_pos)/redraw.r_charw/2);

    if (click_point<0)
    {
      click_point=0;
    }
    if (click_point>(session[selection_session].terminal_size_x*
				(session[selection_session].terminal_size_y+
					session[selection_session].scrollback)))
    {
      click_point=(session[selection_session].terminal_size_x*
				(session[selection_session].terminal_size_y+
					session[selection_session].scrollback));
    }

    refresh_selection_clear();

    switch (selection_adjust_dragging)
    {
      case SELECTION_ADJUST_START:
	selection_start=click_point;
	break;
      case SELECTION_ADJUST_END:
	selection_end=click_point;
	break;
    }

    refresh_selection_set();

    force_redraw(session[selection_session].window_handle,0,
       (-session[selection_session].terminal_size_y-
	session[selection_session].scrollback)*
	redraw.r_charh*2*zap_yeig,
	      session[selection_session].terminal_size_x*redraw.r_charw*2,0);
  }
}

void save_selection(char *filename, bool ansi_colour)
{
  FILE *file_handle;
  int loop;
  int current_fg=7;
  int current_bg=0;
  int current_flags=0;
  int loop_start;
  int loop_end;

  file_handle=fopen(filename,"wb");

  if (file_handle==0)
  {
    char string[1024];
    sprintf(string,"Failed to open file '%s' for writing",filename);
    generror(string, false);
    return;
  }

  if (selection_end>selection_start)
  {
    loop_start=selection_start;
    loop_end=selection_end;
  }
  else
  {
    loop_start=selection_end;
    loop_end=selection_start;
  }

  for (loop=loop_start*4; loop<loop_end*4; loop+=4)
  {
    if (loop!=loop_start*4)
    {
      if ((loop % (session[selection_session].terminal_size_x*4))==0)
      {
	fputc('\n',file_handle);
      }
    }

    if (ansi_colour==true)
    {
      if (read_assigned_flags(selection_session, loop) & NETTLE_FLAG_INVERTED)
      {
	if (!(current_flags & NETTLE_FLAG_INVERTED))
	{
	  fprintf(file_handle,"\x1B%s","7m");
	}
      }
      if (!(read_assigned_flags(selection_session, loop) & NETTLE_FLAG_INVERTED))
      {
	if (current_flags & NETTLE_FLAG_INVERTED)
	{
	  fprintf(file_handle,"\x1B%s","27m");
	}
      }
      if (read_assigned_fg(selection_session,loop)!=current_fg)
      {
	if (read_assigned_fg(selection_session,loop)>7)
	{
	  fprintf(file_handle,"\x1B%s%c%c","1;3",
					      read_assigned_fg(selection_session,loop)-8+48,'m');
	}
	else
	{
	  fprintf(file_handle,"\x1B%c%c%c",'3',read_assigned_fg(selection_session,loop)+48,'m');
	}
      }
      if (read_assigned_bg(selection_session,loop)!=current_bg)
      {
	if (read_assigned_bg(selection_session,loop)>7)
	{
	  fprintf(file_handle,"\x1B%s%c%c","1;4",
				read_assigned_bg(selection_session,loop)-8+48,'m');
	}
	else
	{
	  fprintf(file_handle,"\x1B%c%c%c",'4',
				read_assigned_bg(selection_session,loop)+48,'m');
	}
      }
      current_fg=read_assigned_fg(selection_session,loop);
      current_bg=read_assigned_bg(selection_session,loop);
      current_flags=read_assigned_flags(selection_session,loop);
    }
    fputc(read_assigned_character(selection_session,loop),file_handle);
  }

  fclose(file_handle);

  _swi(OS_File, _IN(0)|_IN(1)|_IN(2), 18, filename, 0xFFF);
}

void handle_selection_drag(void)
{
  int block[23];
  int x, y, buttons, window_handle, icon_handle;
  int x_pos, y_pos;
  bool do_scroll;
  int zap_yeig=_swi(OS_ReadModeVariable, _IN(0)|_IN(1)|_RETURN(2), -1, 5);

  _swi(Wimp_GetPointerInfo, _IN(1), block);

  x=block[0];
  y=block[1];
  buttons=block[2];
  window_handle=block[3];
  icon_handle=block[4];

  if (buttons==0)
  {
    if (selection_start==selection_end)
    {
      selection_session=-1;
    }
    selection_in_progress=false;
    return;
  }

  block[0]=session[selection_session].window_handle;

  _swi(Wimp_GetWindowInfo, _IN(1), ((char *) block)+1);

  x_pos=block[1]-block[5];
  y_pos=block[4]-block[6];

  /* Scroll when selection happening and we're near the edge of the window */
  do_scroll = false;

  if (x<(block[1]+32))
  {
    block[5]-=(block[1]+32-x);
    do_scroll = true;
  }

  if (x>(block[3]-32))
  {
    block[5]+=(x-block[3]+32);
    do_scroll = true;
  }

  if (y<(block[2]+32))
  {
    block[6]-=(block[2]+32-y);
    do_scroll = true;
  }

  if (y>(block[4]-32))
  {
    block[6]+=(y-block[4]+32);
    do_scroll = true;
  }

  if (do_scroll)
  {
    _swi(Wimp_OpenWindow, _IN(1), block);
  }

  switch (buttons)
  {
    case 4:
      /* Drag SELECT - clear the selection, re-work it out, and set it again, then redraw */
      refresh_selection_clear();

      selection_end=((-((y-y_pos)/redraw.r_charh/2/zap_yeig))*
				session[selection_session].terminal_size_x)+
								((x-x_pos)/redraw.r_charw/2);

      if (selection_end>(session[selection_session].terminal_size_x*
				(session[selection_session].terminal_size_y+
					session[selection_session].scrollback)))
      {
	selection_end=(session[selection_session].terminal_size_x*
				(session[selection_session].terminal_size_y+
					session[selection_session].scrollback));
      }
      if (selection_end<0)
      {
	selection_end=0;
      }

      refresh_selection_set();

      force_redraw(session[selection_session].window_handle,0,
	       (-session[selection_session].terminal_size_y-
		session[selection_session].scrollback)*
		redraw.r_charh*2*zap_yeig,
		      session[selection_session].terminal_size_x*redraw.r_charw*2,0);

      break;
    case 1:
      /* ADJUST dragging - see c.seln */
      selection_adjust_drag(x,x_pos,y,y_pos);
      break;
  }
}
