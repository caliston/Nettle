/* Socket library */
/* by A. Macfarlane Smith */
/* (C) Archifishal Software 2001 */

#include "generic.h"
#include "globals.h"

#include "sys/types.h"

#include "sys/byteorder.h"
#include "sys/errno.h"
#include "sys/ioctl.h"
#include "sys/socket.h"

#include "netinet/in.h"
#include "arpa/inet.h"

#include "netdb.h"

#include "socket.h"

char socket_resolvehost(char *host_name, unsigned int *address)
{
  int status;
  struct hostent *hostent;

  if (_swix(Resolver_GetHost, _IN(0)|_OUT(0)|_OUT(1), host_name, &status, &hostent)==0)
  {
    switch (status)
    {
      case -1: case -2:
        return RESOLVER_FAILED;
        break;
      case 0:
        *address=(unsigned int) *((int *)(*hostent).h_addr);
        return RESOLVER_SUCCESS;
        break;
    }
  }
  else
  {
    return RESOLVER_FAILED;
  }
  return RESOLVER_INPROGRESS;
}

int socket_connecttoip(int ip_address,int port_number)
{
  int socket_handle;
  int data=1;
  struct sockaddr_in address;

  socket_handle=socket(AF_INET,SOCK_STREAM, PF_UNSPEC);
  if (socket_handle==-1) { return -1; }

  if (ioctl(socket_handle,FIONBIO,&data))
  {
    return -1;
  }

  address.sin_family=AF_INET;
  address.sin_port=htons(port_number);
  address.sin_addr.s_addr=ip_address;

  connect(socket_handle,(struct sockaddr *) &address, sizeof(address));

  return socket_handle;
}

int socket_listen(int port_number)
{
  int socket_handle;
  int data=1;
  struct sockaddr_in address;

  socket_handle=socket(AF_INET, SOCK_STREAM, PF_UNSPEC);
  if (socket_handle==-1) { return -1; }

  if (ioctl(socket_handle,FIONBIO,&data)==-1)
  {
    return -1;
  }

  address.sin_family=AF_INET;
  address.sin_port=htons(port_number);
  address.sin_addr.s_addr=INADDR_ANY;

  if (bind(socket_handle,(struct sockaddr *) &address, sizeof(address)))
  {
    socket_close(socket_handle);
    return -1;
  }

  listen(socket_handle,16);

  return socket_handle;
}

void socket_close(int socket_handle)
{
  /* this is only needed for NetLib */
  extern int close(int /*s*/);

  close(socket_handle);
}

int socket_connected(int socket_handle)
{
  char block[1];

  if (recv(socket_handle,block,1,MSG_PEEK)==-1)
  {
    switch (errno)
    {
      case ENOTCONN:
        return 2;
        break;
      case ECONNREFUSED:
        return -6;
        break;
    }
  }
  return 4;
}

bool socket_closed(int socket_handle)
{
  char block[1];
  int result;

  result=recv(socket_handle,block,1,MSG_PEEK);

  if (result==0)
    return true;

  return false;
}

int socket_readdata(int socket_handle, char * buffer, int length)
{
  int result;

  result=recv(socket_handle,buffer,length,0);

  if (result==-1)
    return 0;

  if (result==0)
    return -1;

  return result;
}

int socket_readdata_flags(int socket_handle, char * buffer, int length, int flags)
{
  int result;

  result=recv(socket_handle,buffer,length,flags);

  if (result==-1)
    return 0;

  return result;
}

char *socket_readline(int socket_handle)
{
  /* Needs finished + other socket functions */
  return NULL;
}

int socket_senddata(int socket_handle, char * buffer, int length)
{
  return send(socket_handle, buffer, length, 0);
}


char *socket_ip_string(int address) {
  struct in_addr saddr;

  saddr.s_addr = address;

  return inet_ntoa(saddr);
}



