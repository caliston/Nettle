/**
 * Nettle Hotlist code
 * (C) Nettle developers 2000-2001
 *
 * $Id$
 */

/**************************/
/* PRELIMINARY IDEAS CODE */
/**************************/
/*

Hotlist entries could look something like this:

My Fave Host
{
  host: 192.168.1.1
  port: telnet
  type: telnet
  term: vt220
  wide: 80
  high: 25
  scrl: 5000
  edit: on, always
}

Blah
{
  host: wibble
}


*/

#include "generic.h"
#include "globals.h"

#include "hotlist.h"
#include "misc.h"
#include "wimp.h"
#include <ctype.h>

static hotlistnode *hotlisthead = NULL;
/* static hotlistnode *hotlisttail = NULL; */
static int items = 0;
static int *menublock = NULL;

/*
static void addnodetolist(hotlistnode *node)
{
  node->next = NULL;
  if (!hotlisthead)
    hotlisthead = node;
  else
    hotlisttail->next = node;
  hotlisttail = node;
  items++;
}
*/

void lose_hotlist(void)
{
  while (hotlisthead)
  {
    hotlistnode *next = hotlisthead->next;

    if (hotlisthead->label)
      free(hotlisthead->label);
    free(hotlisthead);
    hotlisthead = next;
  }

  if (menublock)
    free(menublock);
}

void load_hotlist(void)
{
  FILE *file_handle;
  char hotlist_path[256];
  char string[256];
  char *str;
  int len;

  get_system_variable(hotlist_path, "Choices$Write", sizeof(hotlist_path));

  if (hotlist_path[0] == '\0' )
  {
    sprintf(string, "<%s$Dir>.Choices.Hotlist", application_name);
  }
  else
  {
    sprintf(string, "Choices:%s.Hotlist", application_name);
  }

  file_handle = fopen(string,"r");
  if (!file_handle)
    return;

  for(;;)
  {
    str = fgets(string, sizeof(string), file_handle);
    if (!str)
      break;

    len = strlen(string);
    if (len)
      if (string[len-1]=='\n')
        string[len-1]='\0';

/**** DEAL WITH LINE HERE *****/

  }

  fclose(file_handle);
}


void create_hotlist_menu(void)
{
  hotlistnode *node = hotlisthead;
  struct wimp_getpointerinfo_block block;
  int position=7;
  
  if (!items)
    return;

  if (!menublock)
  {
    menublock = (int *) malloc(24*items+28);
    if (!menublock)
      return;

    strcpy((char *)menublock, "Hotlist");  /* Quick hacky title */

    menublock[3]=(7<<0)+(2<<8)+(7<<16)+(0<<24); /* black on white items, black on grey title text */
    menublock[4]=0;
    menublock[5]=44;
    menublock[6]=0;

    while (node)
    {
      menublock[position++]= node->next ? 0 : (1<<7);  /* Set "last" bit if this is the end of the list */
      menublock[position++]=-1;  /* No submenu */
      menublock[position++]=WIMP_ICON_FGCOL(7) | WIMP_ICON_VCENT_BIT | WIMP_ICON_FILLED_BIT | \
  			    WIMP_ICON_TEXT_BIT | WIMP_ICON_INDIRECTED_BIT;

      menublock[position+0]=(int) node->label;
      menublock[position+2]=strlen(node->label)+1;
      menublock[position+1]=(int) menublock[position+0]+menublock[position+2]-1;
      position+=3;

      node = node->next;
    }
  }

  _swi(Wimp_GetPointerInfo, _IN(1), &block);
  _swi(Wimp_CreateMenu, _INR(1,3), menublock, block.pos.x-64, 96+(items*44));
  menu_open = MENU_HOTLIST;
}


