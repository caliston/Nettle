/**
 * Line editor code
 * (C) Nettle developers 2000-2001
 *
 * $Id$
 */

#include "generic.h"
#include "globals.h"

#include "lineedit.h"
#include "misc.h"
#include "wimp.h"


static void create_line_editor_icons(struct session_struct *session, int width)
{
  int loop;
  int old_width;
  bool selected;

  int caret_window_handle;
  int caret_icon_handle;
  int caret_index;

  {
    struct wimp_getcaretposition_block block;

    _swi(Wimp_GetCaretPosition, _IN(1), &block);

    caret_window_handle=block.window_handle;
    caret_icon_handle  =block.icon_handle;
    caret_index        =block.index;
  }

  {
    struct wimp_geticonstate_block block;

    block.window_handle=session->pane_handle;
    block.icon_handle  =0;

    _swi(Wimp_GetIconState, _IN(1), &block);

    if (block.icon_flags & (1<<23))
    {
      old_width=0;
      selected=true;
    }
    else
    {
      old_width=block.maxx;

      if (width==old_width)
        return;

      if (block.icon_flags & (1<<21))
        selected=true;
      else
        selected=false;

      for (loop=0; loop<2; loop++)
      {
        struct wimp_deleteicon_block block;

        block.window_handle=session->pane_handle;
        block.icon_handle  =loop;

        _swi(Wimp_DeleteIcon, _IN(1), &block);
      }
    }
  }

  {
    struct wimp_createicon_block block;

    block.window_handle=session->pane_handle;
    block.minx         =width-48;
    block.miny         =-48;
    block.maxx         =width;
    block.maxy         =0;

    if (selected)
    {
      block.icon_flags =0x1720B113;
    }
    else
    {
      block.icon_flags =0x1700B113;
    }
    block.contents.it.text         =line_editor_icon_text;
    block.contents.it.validation   =line_editor_icon_sprite;
    block.contents.it.text_len     =1;

    _swi(Wimp_CreateIcon, _IN(1), &block);

    block.window_handle=session->pane_handle;
    block.minx         =-4;
    block.miny         =-52;
    block.maxx         =width-54;
    block.maxy         =4;
    if (selected)
    {
      block.icon_flags =0x0700f135;
    }
    else
    {
      block.icon_flags =0x0780f135;
    }
    block.contents.it.text      =session->line_editor_buffer;
    block.contents.it.validation=line_editor_buffer_indirected;
    block.contents.it.text_len  =512;

    _swi(Wimp_CreateIcon, _IN(1), &block);
  }

  if (width<old_width)
  {
    force_redraw(session->pane_handle,width-56,-48,old_width,0);
  }

  if (width>old_width)
  {
    force_redraw(session->pane_handle,old_width-56,-48,width,0);
  }

  if (caret_window_handle==session->pane_handle)
  {
    set_caret_position(caret_window_handle, caret_icon_handle, -1, caret_index);
  }
}


void open_pane_window(struct session_struct *session, struct wimp_openwindow_block *main_block)
{
  struct wimp_getwindowoutline_block gwo_block;
  struct wimp_openwindow_block block;
  int width;

  width=main_block->maxx;

  gwo_block.window_handle=session->window_handle;
  _swi(Wimp_GetWindowOutline, _IN(1), &gwo_block);

  block.window_handle=session->pane_handle;
  block.minx=main_block->minx;
  block.miny=(main_block->miny)-40-48;
  block.maxx=width;

  /* This is wrong as it assumes a toolsprite height */
  block.maxy=(main_block->miny)-40;
  block.scroll_x=0;
  block.scroll_y=0;
  block.handle_behind=main_block->handle_behind;

  create_line_editor_icons(session, block.maxx-block.minx);

  _swi(Wimp_OpenWindow, _IN(1), &block);
}


bool line_editor_active(struct session_struct *session)
{
  if (line_editor)
  {
    struct wimp_geticonstate_block block;

    block.window_handle=session->pane_handle;
    block.icon_handle  =0;

    _swi(Wimp_GetIconState, _IN(1), &block);

    if ((block.icon_flags & (1<<21)) || (block.icon_flags & (1<<23)))
      return true;
  }

  return false;
}
