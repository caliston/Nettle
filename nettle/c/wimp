/**
 * Wimp_Poll / Wimp code
 * (C) Nettle developers 2000-2001
 *
 * $Id$
 */

#include "generic.h"
#include "globals.h"

#include <errno.h>
#include "sys/errno.h"
#include "sys/socket.h"
#include "sys/select.h"
#include "sys/time.h"

#include "lineedit.h"
#include "misc.h"
#include "nettle.h"
#include "process.h"
#include "seln.h"
#include "socket.h"
#include "wimp.h"
#include "zapredraw.h"
#include "hotlist.h"

static int menu_data[64];
static int menu_data2[64];
static int *bitmaps_area=0;
static int bitmaps_area_number=0;
static int drag_window_handle=0;
static int drag_icon_handle=0;
static struct session_struct *terminal_menu_session = NULL;
static int zap_palette[16];
static int palette[16]={0x00000000, 0x0000D000, 0x00D00000, 0x00D0D000,
  		        0xD0000000, 0xD000D000, 0xD0D00000, 0xD0D0D000,
  		        0x40404000, 0x0000FF00, 0x00FF0000, 0x00FFFF00,
  		        0xFF000000, 0xFF00FF00, 0xFFFF0000, 0xFFFFFF00};

static bool generror_question(char *string);
static void create_iconbar_menu(void);
static void open_open_window(bool open_window_flag);
static int get_icon_data_length(int window_handle, int icon_handle);
static void create_terminal_menu(void);
static void create_connection_menu(void);
static void create_terminal_type_menu(void);
static void drag_start(int, int);



void closedown_wimp(void)
{
  _swi(Wimp_CloseDown, _INR(0,1), task_handle, 0x4b534154);
}



static void wimp_pollresolve(struct session_struct *session)
{
  switch(socket_resolvehost(session->socket_host,
                            &session->socket_ip))
  {
    case RESOLVER_INPROGRESS:
      /* not finished yet */
      break;
    case RESOLVER_FAILED:
      set_title_bar(session->window_handle,
                    lookup_static("title_disconnect"));
      write_out_strings(session, lookup_static("noresolv"), "\r\n", 0);
      session->socket_state=NETTLE_SESSION_NONE;
      break;
    case RESOLVER_SUCCESS:
      session->socket_handle =
                      socket_connecttoip(session->socket_ip,
                                         session->socket_port);

      if (session->socket_handle!=-1)
      {
        session->socket_state = NETTLE_SESSION_CONNECT;
        write_out_strings(session, lookup_static("connecting"),
                          socket_ip_string(session->socket_ip),
                          "...\r\n", 0);
      }
      else
      {
        write_out_strings(session, lookup_static("nosocket"),
                           "\r\n", 0);
        session->socket_state=NETTLE_SESSION_NONE;
      }
  }
}



static void wimp_pollconnect(struct session_struct *session)
{
  switch (socket_connected(session->socket_handle))
  {
    case -6:
      set_title_bar(session->window_handle,
                     lookup_static("title_noconn"));
      write_out_strings(session, lookup_static("noconn"), "\r\n", 0);
      socket_close(session->socket_handle);

      session->socket_handle=0;
      session->socket_state=NETTLE_SESSION_NONE;
      break;
    case 4:
      {
        char string[1024];

        sprintf(string,"nettle/%s (%s,%d)",
                terminal_name[session->terminal_type],
                session->socket_host,
                session->socket_port);

        set_title_bar(session->window_handle,string);

        session->socket_state = NETTLE_SESSION_CONNECTED;
        write_out_strings(session, lookup_static("connected"),
                          socket_ip_string(session->socket_ip),
                          "\r\n", 0);
        break;
     }
  }
}



static void wimp_pollsocket(struct session_struct *session)
{
  int packet_length;
  char receive_block[RECEIVE_BLOCK_LENGTH];

  packet_length = recv(session->socket_handle, receive_block,
                       RECEIVE_BLOCK_LENGTH, 0);

  if (packet_length == 0 || packet_length == -1)
  {
    set_title_bar(session->window_handle, lookup_static("title_disconnect"));
    reset_terminal(session);
    if (packet_length == 0)
    {
      /* EOF received */
      write_out_strings(session, "\r\n", lookup_static("closed"), 0);
    }
    else
    {
      char errorstr[16];
      sprintf(errorstr, "%d", errno);
      write_out_strings(session, "\r\n", "Nettle: Socket error ", errorstr,
                        " occurred", 0);
    }

    write_out_strings(session, "\r\n", lookup_static("disconn"), "\r\n", 0);
    socket_close(session->socket_handle);
    session->socket_handle=0;
    session->socket_state=NETTLE_SESSION_NONE;
  }
  else
  {
    /* deal with data from socket */
    write_out_data(session, receive_block, packet_length);
  }
}



static void wimp_pollsessions(void)
{
  struct session_struct  *session;
  int                     fdupperbound; /* (exclusive) */
  fd_set                  readfds;
  struct timeval          timeval;
  int                     numberready;

  FD_ZERO(&readfds);
  fdupperbound = 0;

  /* for each session, either poll it if necessary, or add its socket to
   * the list of ones to check with select() */
  for (session = sessions; session != NULL; session = session->next)
  {
    if (session->connection_type != NETTLE_TELNET)
      continue;

    switch (session->socket_state)
    {
      case NETTLE_SESSION_RESOLVE:
        wimp_pollresolve(session);
        break;

      case NETTLE_SESSION_CONNECT:
        wimp_pollconnect(session);
        break;

      case NETTLE_SESSION_CONNECTED:
        assert(session->socket_handle >= 0 && session->socket_handle < 256);
        FD_SET(session->socket_handle, &readfds);
        if (session->socket_handle >= fdupperbound)
          fdupperbound = session->socket_handle + 1;
        break;

      case NETTLE_SESSION_NONE:
        /* do nothing */
        break;

      default:
        assert(0);
    }
  }

  if (fdupperbound == 0)
    /* no sockets to be polled */
    return;

  timeval.tv_sec  = 0;
  timeval.tv_usec = 0;

  numberready = select(fdupperbound, &readfds, NULL, NULL, &timeval);
  if (numberready == 0)
    /* no sockets need attention */
    return;

  if (numberready == -1 && errno != EBADF)
    /* error other than an invalid descriptor, nothing we can do */
    return;

  for (session = sessions; session != NULL; session = session->next)
  {
    if (session->connection_type != NETTLE_TELNET)
      continue;

    if (session->socket_state != NETTLE_SESSION_CONNECTED)
      continue;

    if (FD_ISSET(session->socket_handle, &readfds))
      wimp_pollsocket(session);
  }
}


void wimp_nullreasoncode(void)
{
  wimp_pollsessions();

  close_log(false);

  if (selection_in_progress)
    handle_selection_drag();
}



/* Redraw window */

void redraw_window(union wimp_poll_block *wimp_block)
{
  struct session_struct *session = sessions;
  int window_handle = wimp_block->redraw_window.window_handle;

  while (session && window_handle != session->window_handle)
  {
    session = session->next;
  }

  if (session)
  {
    zapgen_code(zapredraw_area,
                session->assigned_area,
                session->terminal_size.x,
                session->terminal_size.y + session->scrollback,
                session->other_session_flags);

    redraw.r_data = zapredraw_area;

    _swi(ZapRedraw_RedrawWindow, _INR(0,1), wimp_block, &redraw);
  }
  else
  {
    int more;

    more = _swi(Wimp_RedrawWindow, _IN(1)|_RETURN(0), wimp_block);
    while (more)
      more = _swi(Wimp_GetRectangle, _IN(1)|_RETURN(0), wimp_block);
  }
}



/* Open window */

void open_window(struct wimp_openwindow_block *wimp_block, int window_handle)
{
  struct wimp_openwindow_block local_block, *block=&local_block;
  struct session_struct *session = sessions;

  /* find out which session this window is - if any! */

  while (session && window_handle != session->window_handle)
  {
    session = session->next;
  }

  if (wimp_block)
  {
    /* Called from Wimp_Poll, so use that block, which contains an OpenWindow struct */
    block = wimp_block;
  }
  else
  {
    /* Called from our own code, so fetch the OpenWindow block */
    block->window_handle = window_handle;

    _swi(Wimp_GetWindowState, _IN(1), block);

    block->handle_behind = -1;  /* Open on top of stack */
  }

  if (session)
  {
    /* This is a main "session" window, so handle the pane, if any */
    struct wimp_getwindowinfo_block window;
    window.window_handle = block->window_handle;
    _swi (Wimp_GetWindowInfo, _IN(1), 1 + (int) &window); /* no icons */

    if (_swi (OS_Byte, _INR(0,2) | _RETURN(1), 129, 254, 255))
    {
      /* Ctrl pressed - allow dynamic resizing */
      /* if the v scrollbar was at the bottom and its vpos is unchanged,
       * force it to the bottom */
      if (window.scroll.y == block->scroll.y &&
	  window.scroll.y - window.max.y + window.min.y == window.work_min.y)
      {
	block->scroll.y = window.work_min.y;
      }
    }
    else
    {
      /* limit to the number of rows */
      int height = block->max.y - block->min.y;
      int maxheight = (session->terminal_size.y * redraw.r_charh) << eig.y;

      /* if the window size is unchanged, DON'T apply this limit
       * (allow for moving the window)
       */
      if (height > maxheight &&
	  (window.max.x - window.min.x != block->max.x - block->min.x ||
	   window.max.y - window.min.y != block->max.y - block->min.y))
      {
        block->min.y = block->max.y - maxheight;
	/* if the v scrollbar was at the bottom and its vpos is unchanged
	 * force it to the bottom */
	if (window.scroll.y == block->scroll.y &&
	    window.scroll.y - window.max.y + window.min.y == window.work_min.y)
	{
	  block->scroll.y = window.work_min.y;
	}
      }

    }

    if (session->line_editor_type!=LINEEDIT_NONE)
    {
      /* open the pane window and set the 'behind' word to behind the pane */
      open_pane_window(session, block);
      block->handle_behind = session->pane_handle;
    }
  }

  _swi(Wimp_OpenWindow, _IN(1), block);
}



/* Close window */

void close_window(int window_handle)
{
  struct wimp_closewindow_block block;
  struct session_struct *session = sessions;

  while (session && window_handle != session->window_handle)
  {
    session = session->next;
  }

  if (session)
  {
    if (session->socket_state == NETTLE_SESSION_CONNECTED)
    {
      char message[200];
      bool status = generror_question(lookup("ConnectionOpen", message, sizeof(message)));

      if (!status)
        return;
    }
    remove_session(session);
  }
  else
  {
    block.window_handle = window_handle;

    _swi(Wimp_CloseWindow, _IN(1), &block);
  }
}



/* Determine if there are any sessions open.  If so, query the user as to whether */
/* to really quit the program. */

static void close_program(void)
{
  struct session_struct *session = sessions;

  while (session)
  {
    if (session->socket_state == NETTLE_SESSION_CONNECTED)
    {
      char message[200];

      quit_flag = generror_question(lookup("ConnectionMultiOpen", message, sizeof(message)));
      return;
    }
    session = session->next;
  }
  quit_flag = true;
}



/* Mouse click */

static void iconbar_click(int x, int y, int buttons, int icon_handle)
{
  if (icon_handle==iconbar_handle)
  {
     switch (buttons)
     {
       case 4:
  	 open_open_window(true);
  	 break;
       case 2:
  	 create_iconbar_menu();
  	 break;
       case 1:
         create_hotlist_menu (false);
         break;
     }
  }
}

static void win_open_click(int x, int y, int buttons, int icon_handle)
{
  switch (icon_handle)
  {
    case 2:
      close_window(win_open);
      break;
    case 3:
      start_connection();
      break;
    case 5:
      create_connection_menu();
      break;
    case 8:
      create_hotlist_menu (true);
      break;
    case 10:
      create_terminal_type_menu();
      break;
  }
}

static void win_save_click(int x, int y, int buttons, int icon_handle)
{
  switch (icon_handle)
  {
    case 0:
      _swi(Wimp_CreateMenu, _IN(1), -1);
      break;

    case 1:
      {
	char save_data[1024];

	read_icon_data(win_save, 2, save_data, sizeof(save_data));

	if ((instr(save_data, ":")>=0))
	{
	  struct wimp_geticonstate_block block;

	  block.window_handle= win_save;
	  block.icon_handle  =4;

	  _swi(Wimp_GetIconState, _IN(1), &block);

	  /* if selected bit is set, then we save with ANSI colour */
	  if (block.icon_flags & (1<<21))
	  {
	    save_selection(save_data, true);
	  }
	  else
	  {
	    save_selection(save_data, false);
	  }

	  if (buttons!=1)
	  {
	    _swi(Wimp_CreateMenu, _IN(1), -1);
	  }
	}
	else
	{
	  generror("ToSaveDrag", true);
	}
      }
      break;

    case 3:
      switch (buttons)
      {
	case 64: case 16:
	  /* Drag */
	  drag_start(win_save, 3);
	  break;
      }
      break;
  }
}


static void win_resize_click(int x, int y, int buttons, int icon_handle)
{
  switch (icon_handle)
  {
    case 6:
      _swi(Wimp_CreateMenu, _IN(1), -1);
      break;
    case 7:
      {
	char string[8];

	resize_terminal(terminal_menu_session,
			atoi(read_icon_data(win_resize, 0, string, sizeof(string))),
			atoi(read_icon_data(win_resize, 2, string, sizeof(string))),
			atoi(read_icon_data(win_resize, 4, string, sizeof(string))),
			true);

	if (buttons!=1)
	{
	  _swi(Wimp_CreateMenu, _IN(1), -1);
	}
      }
      break;
  }
}


static void session_window_click(int x, int y, int buttons, int icon_handle, struct session_struct *session)
{
  int x_pos;
  int y_pos;

  /* if we're not pressing MENU */
  if (buttons!=2 && buttons!=32)
  {
    /* set the caret to be in the window or line editor (depending if lineeditor is on) */
    if (line_editor_active(session))
    {
      struct wimp_getcaretposition_block block;

      _swi(Wimp_GetCaretPosition, _IN(1), &block);

      if (session->line_editor_type==LINEEDIT_CHECKBOX)
      {
        if (block.window_handle!=session->pane_handle)
        {
  	  set_caret_position(session->pane_handle, 1, -1,
	    get_icon_data_length(session->pane_handle, 1));
        }
      }
      else
      {
        if (block.window_handle!=session->window_handle)
        {
  	  set_caret_position(session->window_handle, -1, -1, -1);
        }
      }
    }
    else
    {
      set_caret_position(session->window_handle,-1,-1,-1);
    }
  }

  {
    struct wimp_getwindowstate_block block;

    block.window_handle=session->window_handle;

    _swi(Wimp_GetWindowState, _IN(1), &block);

    x_pos=block.min.x-block.scroll.x;
    y_pos=block.max.y-block.scroll.y;
  }

  switch (buttons)
  {
    case 64:
      /* if SELECT drag, then clear the selection and work out what where the selection */
      /* start is */
      refresh_selection_clear();

      selection_session = session;
      selection_start = -( ( (y - y_pos) >> eig.y ) / redraw.r_charh )
                        * session->terminal_size.x
                        + ( ( (x - x_pos) >> eig.x ) / redraw.r_charw );

      if (selection_start > (selection_session->terminal_size.x*
			    (selection_session->terminal_size.y+
				    selection_session->scrollback)))
      {
	selection_start=(selection_session->terminal_size.x*
			    (selection_session->terminal_size.y+
				    selection_session->scrollback));
      }

      if (selection_start<0)
      {
	selection_start=0;
      }

      selection_end=selection_start;
      selection_in_progress=true;
      break;
    case 16:
      /* if ADJUST drag, then if there is no selection, then start one */
      if (!selection_session)
      {
	refresh_selection_clear();

	selection_session = session;
        selection_start = -( ( (y - y_pos) >> eig.y ) / redraw.r_charh )
                          * session->terminal_size.x
                          + ( ( (x - x_pos) >> eig.x ) / redraw.r_charw );

	if (selection_start>(selection_session->terminal_size.x*
			    (selection_session->terminal_size.y+
				    selection_session->scrollback)))
	{
	  selection_start=(selection_session->terminal_size.x*
			    (selection_session->terminal_size.y+
				    selection_session->scrollback));
	}

	if (selection_start<0)
	{
	  selection_start = 0;
	}

	selection_end=selection_start;
	selection_in_progress=true;
	selection_adjust_dragging=SELECTION_ADJUST_END;
      }
      else
      {
	selection_in_progress=true;
      }
      break;
    case 4:
      /* if SELECT click, then clear the selection */
      if (selection_session)
      {
	refresh_selection_clear();
	force_redraw(selection_session->window_handle,0,
	  (-selection_session->terminal_size.y-
	    selection_session->scrollback)*
	    redraw.r_charh << eig.y,
	       selection_session->terminal_size.x*redraw.r_charw << eig.x,0);
	selection_session = NULL;
      }
      break;
    case 2:
      terminal_menu_session = session;
      create_terminal_menu();
      break;
    case 1:
      /* if ADJUST click, then extend the selection */
      selection_adjust(x,x_pos,y,y_pos);
      break;
  }
}

static void session_pane_click(int x, int y, int buttons, int icon_handle, struct session_struct *session)
{
  switch (icon_handle)
  {
    case 0:
      {
	struct wimp_geticonstate_block block;

	block.window_handle=session->pane_handle;
	block.icon_handle  =icon_handle;

	_swi(Wimp_GetIconState, _IN(1), &block);

	if (block.icon_flags & (1<<21))
	{
	  {
	    struct wimp_seticonstate_block icon_set;

	    icon_set.window_handle=session->pane_handle;
	    icon_set.icon_handle  =1;
	    icon_set.eor	  =0;
	    icon_set.clear	  =1<<23;

	    _swi(Wimp_SetIconState, _IN(1), &icon_set);
	  }

	  {
	    struct wimp_getcaretposition_block caret_pos;

	    _swi(Wimp_GetCaretPosition, _IN(1), &caret_pos);

	    if (caret_pos.window_handle==session->window_handle)
	    {
	      set_caret_position(session->pane_handle, 1, -1,
		   get_icon_data_length(session->pane_handle, 1));
	    }
	  }
	}
	else
	{
	  {
	    struct wimp_seticonstate_block icon_set;

	    icon_set.window_handle=session->pane_handle;
	    icon_set.icon_handle  =1;
	    icon_set.eor	  =1<<23;
	    icon_set.clear	  =1<<23;

	    _swi(Wimp_SetIconState, _IN(1), &icon_set);
	  }

	  {
	    block.window_handle=session->pane_handle;
	    block.icon_handle  =1;

	    _swi(Wimp_GetIconState, _IN(1), &block);

	    force_redraw(session->pane_handle, block.min.x, block.min.y,
					       block.max.x, block.max.y);
	  }

	  {
	    struct wimp_getcaretposition_block caret_pos;

	    _swi(Wimp_GetCaretPosition, _IN(1), &caret_pos);

	    if (caret_pos.window_handle==session->pane_handle)
	    {
	      set_caret_position(session->window_handle,-1,-1,-1);
	    }
	  }
	}
      }
  }
}


/* Mouse click */

void mouse_click(int x, int y, int buttons, int window_handle, int icon_handle)
{
  if (window_handle==-2)
  {
    iconbar_click(x,y,buttons,icon_handle);
  }
  else if (window_handle == win_open)
  {
    win_open_click(x,y,buttons,icon_handle);
  }
  else if (window_handle == win_save)
  {
    win_save_click(x,y,buttons,icon_handle);
  }
  else if (window_handle == win_resize)
  {
    win_resize_click(x,y,buttons,icon_handle);
  }
  else
  {
    struct session_struct *session = sessions;

    while (session)
    {
      if (window_handle == session->window_handle)
      {
        session_window_click(x,y,buttons,icon_handle,session);
	return;
      }
      else if (session->line_editor_type==LINEEDIT_CHECKBOX &&
               (window_handle == session->pane_handle))
      {
        session_pane_click(x,y,buttons,icon_handle,session);
	return;
      }

      session = session->next;
    }
  }
}



/* Drag finished */

void drag_finished(void)
{
  struct wimp_getpointerinfo_block gpi_block;
  union wimp_poll_block block;

  if (drag_window_handle==win_save)
  {
    char string[1024];
    int loop;

    read_icon_data(win_save, 2, string, sizeof(string));
    loop = strlen(string);

    while (loop>=0 && string[loop]!='.' && string[loop]!=':')
    {
      loop--;
    }

    _swi(Wimp_GetPointerInfo, _IN(1), &gpi_block);

    block.user_message.contents.data_save.window_handle=gpi_block.window_handle;
    block.user_message.contents.data_save.icon_handle  =gpi_block.icon_handle;
    block.user_message.contents.data_save.pos.x        =gpi_block.pos.x;
    block.user_message.contents.data_save.pos.y        =gpi_block.pos.y;
    block.user_message.contents.data_save.size         =selection_end-selection_start;
    block.user_message.contents.data_save.filetype     =0xFFF;

    strcpy(block.user_message.contents.data_save.file_name, string+loop+1);

    block.user_message.length      =(48+strlen(string+loop+1)) & ~3;
    block.user_message.your_ref    =0;
    block.user_message.message_code=1; /* DataSave */

    _swi(Wimp_SendMessage, _INR(0,3), 17, &block,
                           block.user_message.contents.data_save.window_handle,
                           block.user_message.contents.data_save.icon_handle);
  }
}



/* Key pressed */

void key_pressed(int window_handle, int icon_handle, int key, int extra)
{
  bool key_status=false;
  char message[MESSAGE_MAX_CONNECTION];

  if (window_handle == win_open)
  {
    char string[11];
    int connection_type;

    read_icon_data(win_open, 4, string, sizeof(string));

    if (strcmp(string, lookup("SSH", message, MESSAGE_MAX_CONNECTION))==0)
      connection_type=NETTLE_SSH;
    else if (strcmp(string,lookup("Taskwindow", message, MESSAGE_MAX_CONNECTION))==0)
      connection_type=NETTLE_TASKWINDOW;
    else
      connection_type=NETTLE_TELNET;

    switch (icon_handle)
    {
      case 0:
        switch (key)
        {
          case 13:
            switch (connection_type)
            {
              case NETTLE_TELNET:
                start_connection();
                break;
              case NETTLE_SSH:
                set_caret_position(win_open,7,-1, get_icon_data_length(win_open, 7));
                break;
            }
            key_status=true;
            break;
        }
        break;
      case 7:
        switch (key)
        {
          case 13:
            switch (connection_type)
            {
              case NETTLE_SSH: case NETTLE_TASKWINDOW:
                start_connection();
                break;
            }
            key_status=true;
            break;
        }
        break;
    }
  }

  if (window_handle==win_resize)
  {
    switch (icon_handle)
    {
      case 4:
        switch (key)
        {
          case 13:
            {
              char string[8];

              resize_terminal(terminal_menu_session,
                              atoi(read_icon_data(win_resize, 0, string, sizeof(string))),
                              atoi(read_icon_data(win_resize, 2, string, sizeof(string))),
                              atoi(read_icon_data(win_resize, 4, string, sizeof(string))),
                              true);

              _swi(Wimp_CreateMenu, _IN(1), -1);
            }
            key_status=true;
        }
        break;
    }
  }

  if (key_status==false)
  {
    {
      {
        struct session_struct *session = sessions;

        while (session && window_handle != session->window_handle)
        {
          session = session->next;
        }

        if (session)
        {
          if (session->socket_state==NETTLE_SESSION_CONNECTED)
          {
            if (pass_f12)
            {
              process_wimp_key(session, key, extra);
              key_status=true;
            }
            else
            {
              if (key!=0x1CC && key!=0x1DC && key!=0x1EC && key!=0x1FC)
              {
                process_wimp_key(session, key, extra);
                key_status=true;
              }
            }
          }
        }
      }
    }
  }

  if (key_status==false)
  {
    struct session_struct *session = sessions;
    int line_editor_icon;

    while (session && window_handle != session->pane_handle)
    {
      session = session->next;
    }

    if (session && session->line_editor_type!=LINEEDIT_NONE)
    {
      line_editor_icon=(session->line_editor_type==LINEEDIT_CHECKBOX ? 1 : 0);

      switch (key)
      {
        case 13:
          if (session->socket_state==NETTLE_SESSION_CONNECTED)
          {
            process_line_editor(session);
            key_status=true;
          }
          break;
        case 0x18E: /* Down arrow */
          key_status=true;
          if (session->line_editor_position==0)
          {
            _swi(OS_WriteI + 7, 0);
          }
          session->line_editor_position--;

          if (session->line_editor_position<0)
          {
            session->line_editor_position=0;
          }

          {
            char icon_data[1024];

            set_icon_data(session->pane_handle, line_editor_icon,
                read_mem((char *)icon_data, session->line_editor_history +
                (session->line_editor_position * 512), sizeof(icon_data)));
          }

          set_caret_position(session->pane_handle, line_editor_icon, -1,
                             get_icon_data_length(session->pane_handle, line_editor_icon));

          break;
        case 0x18F: /* Up arrow */
          key_status=true;
          if (session->line_editor_position==session->line_editor_total-1)
          {
            _swi(OS_WriteI + 7, 0);
          }
          session->line_editor_position++;

          if (session->line_editor_position>session->line_editor_total-1)
          {
            session->line_editor_position=session->line_editor_total-1;
          }

          {
            char icon_data[1024];

             set_icon_data(session->pane_handle,line_editor_icon,
                read_mem(icon_data, session->line_editor_history+
                 (session->line_editor_position * 512), sizeof(icon_data)));
          }

          set_caret_position(session->pane_handle, line_editor_icon, -1,
                             get_icon_data_length(session->pane_handle, line_editor_icon));

          break;
      }
    }
  }

  if (key_status==false)
  {
    _swi(Wimp_ProcessKey, _IN(0), key);
  }
}



/* Menu selection */

void menu_choice(int *selection)
{
  switch (menu_open)
  {
    case MENU_ICONBAR:
      switch (selection[0])
      {
        case 2:
          /* Quit */
          close_program();
      }
      break;

    case MENU_TERMINAL:
      switch (selection[0])
      {
        case 0:
          switch (selection[1])
          {
            case 3:
              {
                /* Clear selection */
                refresh_selection_clear();
                force_redraw(selection_session->window_handle,0,
               			(-selection_session->terminal_size.y-
               			selection_session->scrollback)*
               			redraw.r_charh << eig.y,
                      		selection_session->terminal_size.x*redraw.r_charw << eig.x,0);

                selection_session = NULL;
              }
              break;
          }
          break;
      }
      break;

    case MENU_CONNECTION:
      {
        char connection[MESSAGE_MAX_CONNECTION];

        switch (selection[0])
        {
          case 0:
            set_icon_data(win_open, 4, lookup("Telnet", connection, MESSAGE_MAX_CONNECTION));
            break;
          case 1:
            set_icon_data(win_open, 4, lookup("SSH",  connection, MESSAGE_MAX_CONNECTION));
            break;
          case 2:
            set_icon_data(win_open, 4, lookup("Taskwindow", connection, MESSAGE_MAX_CONNECTION));
            break;
        }
        open_open_window(false);
      }
      break;

    case MENU_TERMINAL_TYPE:
      {
        char terminal[MESSAGE_MAX_TERMINAL];
        char string[6];
        sprintf(string, "Term%d", selection[0]);

        set_icon_data(win_open, 9, lookup(string, terminal, MESSAGE_MAX_TERMINAL));
      }
      break;

    case MENU_HOTLIST:
      {
        char tmpbuf[100];
        char connection[MESSAGE_MAX_CONNECTION];
        unsigned short port;
	char *command;
	char *host;
	hotlisttype type = get_hotlist_entry(selection[0], &host, &port, &command);

        switch(type)
	{
	  case ht_telnet:
	    set_icon_data(win_open, 4, lookup("Telnet", connection, MESSAGE_MAX_CONNECTION));
	    if (port!=23) sprintf(tmpbuf, "%s:%d", host, port);
	      else strcpy(tmpbuf, host);
	    set_icon_data(win_open, 0, tmpbuf);
	    set_icon_data(win_open, 7, "");
	    break;
	  case ht_ssh:
	    set_icon_data(win_open, 4, lookup("SSH",  connection, MESSAGE_MAX_CONNECTION));
	    if (port!=22) sprintf(tmpbuf, "%s:%d", host, port);
	      else strcpy(tmpbuf, host);
	    set_icon_data(win_open, 0, tmpbuf);
	    set_icon_data(win_open, 7, command);
	    break;
	  case ht_task:
	    set_icon_data(win_open, 4, lookup("Taskwindow", connection, MESSAGE_MAX_CONNECTION));
	    set_icon_data(win_open, 0, "");
	    set_icon_data(win_open, 7, command);
	    break;
	  case ht_invalid:
	    break;   /* Just to keep the compiler quiet - handle all enums! */
	}
      }
      break;

    case MENU_HOTLIST_IBAR:
      {
        unsigned short port;
	char *command;
	char *host;
	int connection_type = 0;
	enum nettle_terminal terminal_type = NETTLE_TERMINAL_VT220;
	hotlisttype type = get_hotlist_entry(selection[0], &host, &port, &command);

	switch (type)
	{
	  case ht_telnet:
	    connection_type = NETTLE_TELNET;
	    break;
	  case ht_ssh:
	    connection_type = NETTLE_TELNET;
	    break;
	  case ht_task:
	    connection_type = NETTLE_TELNET;
	    break;
	  case ht_invalid:
	    break; /* keep the compiler quiet */
	}

	if (type != ht_invalid)
	  start_connection_int (connection_type, terminal_type,
				host, port, command);
      }
      break;
  }

  {
    struct wimp_getpointerinfo_block block;

    _swi(Wimp_GetPointerInfo, _IN(1), &block);

    /* If ADJUST, then re-open  menu where it was before */
    if (block.buttons==1)
    {
      switch (menu_open)
      {
        case MENU_ICONBAR:
          create_iconbar_menu();
          break;

        case MENU_TERMINAL:
          create_terminal_menu();
          break;

        case MENU_CONNECTION:
          create_connection_menu();
          break;

        case MENU_TERMINAL_TYPE:
          create_terminal_type_menu();
          break;

        case MENU_HOTLIST:
          create_hotlist_menu (true);
          break;

        case MENU_HOTLIST_IBAR:
          create_hotlist_menu (false);
          break;
      }
    }
  }
}



/* Lose caret */

void lose_caret(int window_handle)
{
  struct session_struct *session = sessions;
  int calc;

  while (session && window_handle != session->window_handle)
  {
    session = session->next;
  }

  if (session)
  {
    struct wimp_getcaretposition_block block;

    _swi(Wimp_GetCaretPosition, _IN(1), &block);

    /* if lineeditor is off, or the caret isn't in the pane, then make the cursor look like */
    /* we have no input */
    if (!(line_editor_active(session)) || block.window_handle != session->pane_handle)
    {
      calc=get_cursor_position(session);
      write_assigned_flags(session, calc,
      			   read_assigned_flags(session, calc) | NETTLE_FLAG_NO_INPUT);

      force_redraw(session->window_handle,
      		   session->pos.x*redraw.r_charw << eig.x,
		   (-session->pos.y-1)*redraw.r_charh << eig.y,
		   (session->pos.x+1)*redraw.r_charw << eig.x,
		   (-session->pos.y)*redraw.r_charh << eig.y);
    }
    return;
  }

  session = sessions;

  while (session && window_handle != session->pane_handle)
  {
    session = session->next;
  }

  if (session)
  {
    /* if the caret is being lost from the pane, then deselect the cursor too */
    calc=get_cursor_position(session);
    write_assigned_flags(session, calc,
    			 read_assigned_flags(session, calc) | NETTLE_FLAG_NO_INPUT);

    force_redraw(session->window_handle,
    		 session->pos.x*redraw.r_charw << eig.x,
		 (-session->pos.y-1)*redraw.r_charh << eig.y,
		 (session->pos.x+1)*redraw.r_charw << eig.x,
		 (-session->pos.y)*redraw.r_charh << eig.y);
  }
}



/* Gain caret */

void gain_caret(int window_handle)
{
  struct session_struct *session = sessions;
  int calc;

  while (session && window_handle != session->window_handle)
  {
    session = session->next;
  }

  if (session)
  {
    /* if the handle is the window handle, get input back for the cursor */
    calc=get_cursor_position(session);

    write_assigned_flags(session, calc,
    			 read_assigned_flags(session, calc) & ~NETTLE_FLAG_NO_INPUT);

    force_redraw(session->window_handle,
    		 session->pos.x*redraw.r_charw << eig.x,
		 (-session->pos.y-1)*redraw.r_charh << eig.y,
		 (session->pos.x+1)*redraw.r_charw << eig.x,
	         (-session->pos.y)*redraw.r_charh << eig.y);

    if (line_editor_active(session) && session->line_editor_type==LINEEDIT_CHECKBOX)
    {
      /* if line editor and doesn't already have caret, then set the caret in pane */
      struct wimp_getcaretposition_block block;

      _swi(Wimp_GetCaretPosition, _IN(1), &block);

      if (block.window_handle!=session->pane_handle)
      {
        set_caret_position(session->pane_handle,1,-1,
               		   get_icon_data_length(session->pane_handle,1));
      }
    }

    return;
  }

  session = sessions;

  while (session && window_handle != session->pane_handle)
  {
    session = session->next;
  }

  if (session)
  {
    calc=get_cursor_position(session);

    /* unset no input flag again */
    write_assigned_flags(session, calc,
    			 read_assigned_flags(session, calc) & ~NETTLE_FLAG_NO_INPUT);

    force_redraw(session->window_handle,
    		 session->pos.x*redraw.r_charw << eig.x,
		 (-session->pos.y-1)*redraw.r_charh << eig.y,
		 (session->pos.x+1)*redraw.r_charw << eig.x,
	         (-session->pos.y)*redraw.r_charh << eig.y);

    {
      struct wimp_getcaretposition_block block;

      _swi(Wimp_GetCaretPosition, _IN(1), &block);

      /* again, set caret if it's not already in the pane */
      if (block.window_handle!=session->pane_handle &&
          session->line_editor_type==LINEEDIT_CHECKBOX)
      {
        set_caret_position(session->pane_handle,1,-1,
           		   get_icon_data_length(session->pane_handle,1));
      }
    }
  }
}



/* Wimp message */

void wimp_message(union wimp_poll_block *wimp_block)
{
  int message_number = wimp_block->user_message.message_code;
  int sender_ref     = wimp_block->user_message.sender_ref;
  int my_ref         = wimp_block->user_message.my_ref;

  switch (message_number)
  {
    case WIMP_MESSAGE_QUIT:
      quit_flag=true;
      break;

    case WIMP_MESSAGE_DATASAVEACK:
      {
        char string[1024];

        read_mem(string, wimp_block->user_message.contents.data_save_ack.file_name, sizeof(string));

        {
          struct wimp_geticonstate_block block;

          block.window_handle=drag_window_handle;
          block.icon_handle  =4;

          _swi(Wimp_GetIconState, _IN(1), &block);

          if (block.icon_flags & (1<<21))
          {
            save_selection(string,true);
          }
          else
          {
            save_selection(string,false);
          }
        }

        if (instr(string,"Wimp$Scrap")==-1)
        {
          set_icon_data(drag_window_handle,2,string);
        }

        wimp_block->user_message.your_ref    =my_ref;
        wimp_block->user_message.message_code=3;

        _swi(Wimp_SendMessage, _INR(0,2), 17, wimp_block, sender_ref);

        _swi(Wimp_CreateMenu, _IN(1), -1);
      }
      break;

    case WIMP_MESSAGE_MODECHANGE:
      mode_change();
      break;

    case WIMP_MESSAGE_TASKWINDOW_OUTPUT:
      {
        struct session_struct *session = sessions;

        if (!session) {
          return;
        }

        while (session && session->socket_handle != sender_ref) {
          session = session->next;
        }

        if (session)
        {
          write_out_data(session,
                         wimp_block->user_message.contents.task_window_output.data,
                         wimp_block->user_message.contents.task_window_output.size);
        }
        wimp_block->user_message.my_ref=wimp_block->user_message.your_ref;

        _swi(Wimp_SendMessage, _INR(0,2), 19, wimp_block, sender_ref);
      }
      break;
    case WIMP_MESSAGE_TASKWINDOW_EGO:
      {
        struct session_struct *session = sessions;
        int txt_handle = wimp_block->user_message.contents.task_window_ego.txt_handle;

        while (session && session != (struct session_struct *) txt_handle) {
          session = session->next;
        }

        if (session)
        {
          session->socket_state = NETTLE_SESSION_CONNECTED;
          session->socket_handle = sender_ref;
          set_title_bar (session->window_handle, lookup_static ("title_open"));
        }
      }
      break;

    case WIMP_MESSAGE_TASKWINDOW_MORIO:
      {
        struct session_struct *session = sessions;

        if (!session)
          return;

        while (session && session->socket_handle != sender_ref)
        {
          session = session->next;
        }

        if (session)
        {
          set_title_bar (session->window_handle, lookup_static ("title_closed"));
          session->socket_state=NETTLE_SESSION_NONE;
          session->socket_handle=0;
        }

        reset_terminal (session);
        write_out_strings (session, "\r\n", lookup_static ("twclosed"), "\r\n", 0);
      }
      break;
  }
}



void mode_change(void)
{
  int *zap_font_used;
  int mem_required;
  int a;
  int b;
  int old_charw;
  int old_charh;
  struct session_struct *session = sessions;

  eig.x = _swi (OS_ReadModeVariable, _INR (0,1) | _RETURN (2), -1, 4);
  eig.y = _swi (OS_ReadModeVariable, _INR (0,1) | _RETURN (2), -1, 5);

  old_charw=redraw.r_charw;
  old_charh=redraw.r_charh;

  /* work out which font we should be using */
  zap_font_used = (eig.y == 1) ? zap_font_area : zap_lowres_font_area;

  _swi(ZapRedraw_ReadVduVars, _IN(1), &redraw);

  mem_required=(zap_font_used[2]*zap_font_used[3]*384);

  switch (redraw.r_bpp)
  {
    case 0:mem_required/=8;break;
    case 1:mem_required/=4;break;
    case 2:mem_required/=2;break;
    case 4:mem_required*=2;break;
    case 5:mem_required*=4;break;
  }

  /* Reallocate the bitmaps area */
  if (dynamic_areas_available())
  {
    if (bitmaps_area_number==0)
    {
      char string[]="Nettle bitmaps area";

      _swi(OS_DynamicArea, _INR(0,8)|_OUT(1)|_OUT(3), 0, -1, mem_required, -1, 0x80,
                           (zap_font_used[2]*zap_font_used[3]*384*4),
                           0, -1, string, &bitmaps_area_number, &bitmaps_area);
    }
    else
    {
      int current_size;

      _swi(OS_DynamicArea, _INR(0,1)|_OUT(2), 2, bitmaps_area_number, &current_size);

      if (mem_required-current_size!=0)
      {
        _swi(OS_ChangeDynamicArea, _INR(0,1), bitmaps_area_number, mem_required-current_size);
      }
    }
  }
  else
  {
      bitmaps_area=realloc(bitmaps_area, mem_required); /* FIXME: Dangerous use of realloc() */
  }

  redraw.r_flags=0;
  redraw.r_charw=zap_font_used[2];
  redraw.r_charh=zap_font_used[3];
  redraw.r_caddr=bitmaps_area;

  _swi(ZapRedraw_CachedCharSize, _INR(0,3)|_OUTR(2,3),
                                 redraw.r_bpp, 0, redraw.r_charw, redraw.r_charh, &a, &b);

  redraw.r_cbpl=a;
  redraw.r_cbpc=b;
  redraw.r_linesp=0;

  _swi(ZapRedraw_ConvertBitmap, _INR(1,4), &redraw, zap_font_used[4], 0x11D,
                                ((char *) zap_font_used)+32);

  redraw.r_palette=zap_palette;

  _swi(ZapRedraw_CreatePalette, _INR(0,4), 2, &redraw, palette, zap_palette, 16);

  redraw.r_for=7;
  redraw.r_bac=0;

  /* Resize all of the terminals to fit the new font size */
  while (session)
  {
    reopen_and_size_window(session, session->terminal_size.x, session->terminal_size.y,
                           old_charw, old_charh);

    session = session->next;
  }
}


void lose_bitmaps(void)
{
  if (dynamic_areas_available())
  {
    if (bitmaps_area_number!=0)
    {
      _swi(OS_DynamicArea, _INR(0,1), 1, bitmaps_area_number);
    }
  }
  else
  {
    free(bitmaps_area);
  }
}

void lose_zapredraw_area(void)
{
  if (dynamic_areas_available())
  {
    if (zapredraw_area_number!=0)
    {
      _swi(OS_DynamicArea, _INR(0,1), 1, zapredraw_area_number);
    }
  }
  else
  {
    free(zapredraw_area);
  }
}

/* Other Wimp related code */

void generror(const char *string, bool is_message)
{
  char message[252];
  struct wimp_reporterror_block block;

  if (is_message)
    string = lookup(string, message, sizeof(message));

  block.errnum=255;

  strcpy(block.errmess, string);

  _swi(Wimp_ReportError, _INR(0,2), &block, 0, application_name);
}



static bool generror_question(char *string)
{
  struct wimp_reporterror_block block;

  block.errnum=255;

  strcpy(block.errmess, string);

  return (bool) (_swi(Wimp_ReportError, _INR(0,2)|_RETURN(1), &block,
                                        (1<<1)+(1<<0), application_name) == 1);
}



void set_caret_position(int window_handle, int icon_handle, int flags, int string_index)
{
  _swi(Wimp_SetCaretPosition, _INR(0,5), window_handle, icon_handle, -1, -1, flags, string_index);
}



void set_icon_data(int window_handle, int icon_handle, const char *contents)
{
  struct wimp_geticonstate_block block;

  block.window_handle=window_handle;
  block.icon_handle  =icon_handle;

  _swi(Wimp_GetIconState, _IN(1), &block);

  if (block.icon_flags & (1<<8))
  {
    if (strcmp(block.contents.it.text, contents) != 0)
    {
      strcpy(block.contents.it.text, contents);

      {
        struct wimp_seticonstate_block icon_set;

        icon_set.window_handle=window_handle;
        icon_set.icon_handle  =icon_handle;
        icon_set.eor          =0;
        icon_set.clear        =0;

        _swi(Wimp_SetIconState, _IN(1), &icon_set);
      }
    }
  }
  else
  {
    char string[1024];
    sprintf(string,"Icon %d in window %X is not indirected.",icon_handle,window_handle);
    generror(string, false);
  }
}



char *read_icon_data(int window_handle, int icon_handle, char *buffer, int buf_len)
{
  struct wimp_geticonstate_block block;

  block.window_handle = window_handle;
  block.icon_handle   = icon_handle;

  _swi(Wimp_GetIconState, _IN(1), &block);

  if (block.icon_flags & WIMP_ICON_INDIRECTED_BIT)
  {
    read_mem(buffer, block.contents.it.text, buf_len);
  }
  else
  {
    char string[1024];
    sprintf(string,"Icon %d in window %X is not indirected.",icon_handle,window_handle);
    generror(string, false);
    buffer[0] = '\0';
  }
  return buffer;
}



static int get_icon_data_length(int window_handle, int icon_handle)
{
  struct wimp_geticonstate_block block;
  int length = 0;

  block.window_handle = window_handle;
  block.icon_handle   = icon_handle;

  _swi(Wimp_GetIconState, _IN(1), &block);

  if (block.icon_flags & WIMP_ICON_INDIRECTED_BIT)
  {
    char *data = block.contents.it.text;

    while (*data != '\0' && *data != '\x0d' && *data != '\x0a') {
      length++;
      data++;
    }
  }
  else
  {
    char string[1024];
    sprintf(string,"Icon %d in window %X is not indirected.",icon_handle,window_handle);
    generror(string, false);
  }
  return length;
}



/* Create menu code */

static int *create_menu(int *menu_defn, char *indirected, char *title, char *entries, ... )
{
  va_list args;
  int window_handle;
  char *item;
  bool exit_loop=false;
  int position=7;
  char *pos;
  bool shaded,dotted,ticked,send_message,last_item;

  if (strlen(title)<12)
  {
    strcpy((char *)menu_defn, title);
  }
  else
  {
    generror("Title string too long (can be fixed, but not important right now)", false);
    return 0;
  }

  menu_defn[3]=(7<<0)+(2<<8)+(7<<16)+(0<<24); /* black on white items, black on grey title text */
  menu_defn[4]=0;
  menu_defn[5]=44;
  menu_defn[6]=0;

  va_start(args, entries);

  item=entries;

  while (!exit_loop)
  {
    ticked=false; dotted=false; shaded=false; send_message=false; last_item=false;
    window_handle=-1;
    {
      menu_defn[position]=0;
      while ((*item=='#') || (*item=='.') || (*item=='/') || (*item=='['))
      {
        switch (*item)
        {
          case '#':
            shaded=true;
            break;
          case '.':
            dotted=true;
            break;
          case '/':
            ticked=true;
            break;
          case '[':
            send_message=true;
            break;
        }
        item++;
      }
    }

    pos=item+strlen(item)-1;
    while ((*pos=='>') || (*pos=='\\'))
    {
      switch (*pos)
      {
        case '>':
          window_handle=va_arg(args,int);
          break;
        case '\\':
          last_item=true;
          exit_loop=true;
          break;
      }
      pos--;
    }

    if (ticked)
    {
      menu_defn[position] |= (1<<0);
    }
    if (dotted)
    {
      menu_defn[position] |= (1<<1);
    }
    if (send_message)
    {
      menu_defn[position] |= (1<<3);
    }
    if (last_item)
    {
      menu_defn[position] |= (1<<7);
    }

    position++;
    menu_defn[position]=window_handle;
    position++;

    menu_defn[position]=WIMP_ICON_FGCOL(7) | WIMP_ICON_VCENT_BIT | WIMP_ICON_FILLED_BIT | WIMP_ICON_TEXT_BIT;
    if (strlen(item)>13)
    {
      menu_defn[position] |= WIMP_ICON_INDIRECTED_BIT;
    }

    if (shaded)
    {
      menu_defn[position] |= WIMP_ICON_SHADED_BIT;
    }

    position++;

    if (strlen(item)<13)
    {
      strncpy(((char *) menu_defn)+(position*4),item,pos-item+1);

      {
        char *menu_data_char=(char *) menu_defn;
        menu_data_char[(position*4)+pos-item+1]='\0';
      }

      position+=3;
    }
    else
    {
      assert(indirected);

      strncpy(indirected, item, pos-item+1);
      indirected[pos-item+1]='\0';
      menu_defn[position++]=(int) indirected;
      menu_defn[position++]=(int) indirected+strlen(indirected);
      menu_defn[position++]=strlen(indirected)+1;
      indirected+=strlen(indirected)+1;
    }

    item=va_arg(args,char *);
  }

  va_end(args);

  return menu_defn;
}



static char *get_menu_item(const char *name)
{
  char contents[MESSAGE_MAX_MENU];
  char *value = lookup(name, contents, MESSAGE_MAX_MENU);
  char *item = malloc(strlen(value) + 1);

  assert(item != NULL);

  return strcpy(item, value);
}



static char *get_last_menu_item(const char *name)
{
  char contents[MESSAGE_MAX_MENU];
  char *value = lookup(name, contents, MESSAGE_MAX_MENU);
  char *item = malloc(strlen(value) + 2);

  assert(item != NULL);

  strcpy(item, value);
  return strcat(item, "\\");
}



static char *get_grey_menu_item(const char *name)
{
  char contents[MESSAGE_MAX_MENU];
  char *value = lookup(name, contents, MESSAGE_MAX_MENU);
  char *item = malloc(strlen(value) + 2);

  assert(item != NULL);

  item[0] = '#';
  item[1] = '\0';
  return strcat(item, value);
}



static char *get_grey_last_menu_item(const char *name)
{
  char contents[MESSAGE_MAX_MENU];
  char *value = lookup(name, contents, 20);
  char *item = malloc(strlen(value) + 3);

  assert(item != NULL);

  item[0] = '#';
  strcpy(item + 1, value);
  strcat(item,"\\");
  return item;
}



static void create_iconbar_menu(void)
{
  struct wimp_getpointerinfo_block block;

  char *menu_title   = get_menu_item("AppName");
  char *menu_info    = get_menu_item("Info");
  char *menu_choices = get_grey_menu_item("Choices");
  char *menu_quit    = get_last_menu_item("Quit");

  if (create_menu(menu_data,0,menu_title,menu_info, win_info,menu_choices,menu_quit))
  {
    _swi(Wimp_GetPointerInfo, _IN(1), &block);

    _swi(Wimp_CreateMenu, _INR(1,3), menu_data, block.pos.x-64, 252);
  }

  free(menu_title);
  free(menu_info);
  free(menu_choices);
  free(menu_quit);

  menu_open=MENU_ICONBAR;
}



static void create_terminal_menu(void)
{
  struct wimp_getpointerinfo_block block;

  char *menu_title          =get_menu_item("Terminal");
  char *menu_selection;
  char *menu_resize         =get_menu_item("Resize");
  char *menu_options        =get_grey_last_menu_item("Options");
  char *menu_selection_title=get_menu_item("Selection");
  char *menu_save	    =get_menu_item("Save");
  char *menu_launch_url     =get_grey_menu_item("LaunchURL");
  char *menu_send           =get_grey_menu_item("Send");
  char *menu_clear          =get_grey_last_menu_item("Clear");

  {
    char string[8];
    sprintf(string,"%d",terminal_menu_session->terminal_size.x);
    set_icon_data(win_resize, 0, string);

    sprintf(string,"%d",terminal_menu_session->terminal_size.y);
    set_icon_data(win_resize, 2, string);

    sprintf(string,"%d",terminal_menu_session->scrollback);
    set_icon_data(win_resize, 4, string);
  }

  if (!selection_session || (selection_start==selection_end))
  {
    menu_selection=get_grey_menu_item("Selection>");
  }
  else
  {
    menu_selection=get_menu_item("Selection>");
  }

  if (create_menu(menu_data, 0, menu_title, menu_selection, menu_data2, menu_resize, win_resize,
    		  menu_options))
  {
    if (create_menu(menu_data2, 0, menu_selection_title, menu_save, win_save, menu_launch_url,
                    menu_send, menu_clear))
    {
      _swi(Wimp_GetPointerInfo, _IN(1), &block);

      _swi(Wimp_CreateMenu, _INR(1,3), menu_data, block.pos.x-64, block.pos.y);
    }
  }

  free(menu_title);
  free(menu_selection);
  free(menu_resize);
  free(menu_options);
  free(menu_selection_title);
  free(menu_save);
  free(menu_launch_url);
  free(menu_send);
  free(menu_clear);

  menu_open=MENU_TERMINAL;
}



static void create_connection_menu(void)
{
  struct wimp_getpointerinfo_block block;

  char *menu_title     =get_menu_item("Connection");
  char *menu_telnet    =get_menu_item("Telnet");
  char *menu_ssh       =get_grey_menu_item("SSH");
  char *menu_taskwindow=get_last_menu_item("Taskwindow");

  if (create_menu(menu_data,0,menu_title,menu_telnet,menu_ssh,menu_taskwindow))
  {
    _swi(Wimp_GetPointerInfo, _IN(1), &block);

    create_menu_by_icon (menu_data, win_open, 5);
  }

  free(menu_title);
  free(menu_telnet);
  free(menu_ssh);
  free(menu_taskwindow);

  menu_open=MENU_CONNECTION;
}



static void create_terminal_type_menu(void)
{
  struct wimp_getpointerinfo_block block;

  char *menu_title     =get_menu_item("Terminal");
  char *menu_term0     =get_grey_menu_item("Term0");
  char *menu_term1     =get_grey_menu_item("Term1");
  char *menu_term2     =get_menu_item("Term2");
  char *menu_term3     =get_grey_menu_item("Term3");
  char *menu_term4     =get_grey_menu_item("Term4");
  char *menu_term5     =get_grey_menu_item("Term5");
  char *menu_term6     =get_grey_menu_item("Term6");
  char *menu_term7     =get_grey_last_menu_item("Term7");

  if (create_menu(menu_data,0,menu_title,menu_term0,menu_term1,menu_term2,menu_term3,
    		  menu_term4,menu_term5,menu_term6,menu_term7))
  {
    _swi(Wimp_GetPointerInfo, _IN(1), &block);

    create_menu_by_icon (menu_data, win_open, 10);
  }

  free(menu_title);
  free(menu_term0);
  free(menu_term1);
  free(menu_term2);
  free(menu_term3);
  free(menu_term4);
  free(menu_term5);
  free(menu_term6);
  free(menu_term7);

  menu_open=MENU_TERMINAL_TYPE;
}



/* Set title bar code */
void set_title_bar(int window_handle, const char *title)
{
  struct wimp_getwindowinfo_block block;

  block.window_handle=window_handle;

  _swi(Wimp_GetWindowInfo, _IN(1), ((int) &block)+1);

  if (block.icon_flags & (1<<8))
  {
    if (strcmp(block.title.it.text, title) != 0)
    {
      strcpy(block.title.it.text, title);

      _swi(Wimp_ForceRedraw, _INR(0,2), window_handle, 0x4B534154, 3);
    }
  }
  else
  {
    generror("Title bar in window is not indirected.", false);
  }
}



/* Force redraw code */
void force_redraw(int window_handle, int minx, int miny, int maxx, int maxy)
{
  _swi(Wimp_ForceRedraw, _INR(0,4), window_handle, minx, miny, maxx, maxy);
}



static void drag_start(int window_handle, int icon_handle)
{
  int xstart, ystart, xsize, ysize;
  char string[256];

  drag_window_handle=window_handle;
  drag_icon_handle=icon_handle;

  {
    struct wimp_getwindowstate_block block;

    block.window_handle=window_handle;

    _swi(Wimp_GetWindowState, _IN(1), &block);

    xstart=block.min.x-block.scroll.x;
    ystart=block.max.y-block.scroll.y;
  }

  xsize=_swi(OS_ReadModeVariable, _INR(0,1)|_RETURN(2), -1, 11);
  ysize=_swi(OS_ReadModeVariable, _INR(0,1)|_RETURN(2), -1, 12);

  xsize <<= eig.x;
  ysize <<= eig.y;

  {
    struct wimp_geticonstate_block gis_block;
    struct wimp_dragbox_block block;

    gis_block.window_handle=window_handle;
    gis_block.icon_handle  =icon_handle;

    _swi(Wimp_GetIconState, _IN(1), &gis_block);

    block.window_handle=window_handle;
    block.drag_type    =5;
    block.min.x         =gis_block.min.x+xstart;
    block.min.y         =gis_block.min.y+ystart;
    block.max.x         =gis_block.max.x+xstart;
    block.max.y         =gis_block.max.y+ystart;
    block.parent_min.x =0;
    block.parent_min.y =0;
    block.parent_max.x =xsize;
    block.parent_max.y =ysize;

    read_icon_data(window_handle, icon_handle, string, sizeof(string));

    if (_swi(OS_Byte, _INR(0,1)|_RETURN(2), 161, 28) & (1<<1))
    {
      _swi(DragASprite_Start, _INR(0,4), 0xc5, 1, string, &block.min.x, 0);
    }
    else
    {
      _swi(Wimp_DragBox, _IN(1), &block);
    }
  }
}



static void open_open_window(bool open_window_flag)
{
  char string[20];
  int connection_type;
  struct wimp_seticonstate_block block;

  read_icon_data(win_open, 4, string, 20);

  {
    char type[20];

    if (strcmp(string, lookup("SSH", type, 20)) == 0)
      connection_type = NETTLE_SSH;
    else if (strcmp(string, lookup("Taskwindow", type, 20)) == 0)
      connection_type = NETTLE_TASKWINDOW;
    else
      connection_type = NETTLE_TELNET;
  }

  switch (connection_type)
  {
    case NETTLE_TELNET:
      block.window_handle=win_open;
      block.icon_handle  =7; /* Command icon */
      block.eor          =WIMP_ICON_SHADED_BIT;
      block.clear        =WIMP_ICON_SHADED_BIT;
      _swi(Wimp_SetIconState, _IN(1), &block);

      block.window_handle=win_open;
      block.icon_handle  =0; /* Host icon */
      block.eor          =0;
      block.clear        =WIMP_ICON_SHADED_BIT;
      _swi(Wimp_SetIconState, _IN(1), &block);

      break;

    case NETTLE_SSH:
      block.window_handle=win_open;
      block.icon_handle  =7; /* Command icon */
      block.eor          =0;
      block.clear        =WIMP_ICON_SHADED_BIT;
      _swi(Wimp_SetIconState, _IN(1), &block);

      block.window_handle=win_open;
      block.icon_handle  =0; /* Host icon */
      block.eor          =0;
      block.clear        =WIMP_ICON_SHADED_BIT;
      _swi(Wimp_SetIconState, _IN(1), &block);

      break;

    case NETTLE_TASKWINDOW:
      block.window_handle=win_open;
      block.icon_handle  =7; /* Command icon */
      block.eor          =0;
      block.clear        =WIMP_ICON_SHADED_BIT;
      _swi(Wimp_SetIconState, _IN(1), &block);

      block.window_handle=win_open;
      block.icon_handle  =0;     /* Host icon */
      block.eor          =WIMP_ICON_SHADED_BIT;
      block.clear        =WIMP_ICON_SHADED_BIT;
      _swi(Wimp_SetIconState, _IN(1), &block);

      break;
  }

  if (open_window_flag)
  {
    struct wimp_getwindowstate_block window;

    window.window_handle = win_open;
    _swi(Wimp_GetWindowState, _IN(1), &window);

    window.handle_behind = -1;  /* Open on top of stack */

    if ((window.window_flags & (1 << 16)) == 0)
    {
      /* window is not open, open it centred on the pointer taking care to
       * not obscure the icon bar */
      struct wimp_getpointerinfo_block pointer;
      int width = window.max.x - window.min.x;
      int height = window.max.y - window.min.y;

      _swi(Wimp_GetPointerInfo, _IN(1), &pointer);

      window.min.x = pointer.pos.x - width / 2;
      window.min.y = pointer.pos.y - height / 2;

      /* '134 + 2' is a cheap approximation of the height of the icon bar */
      if (window.min.y < 134 + 2)
        window.min.y = 134 + 2;

      window.max.x = window.min.x + width;
      window.max.y = window.min.y + height;
    }
    _swi(Wimp_OpenWindow, _IN(1), &window);
  }

  switch (connection_type)
  {
    case NETTLE_TELNET:
    case NETTLE_SSH:
      set_caret_position(win_open, 0, -1, get_icon_data_length(win_open, 0));
      break;

    case NETTLE_TASKWINDOW:
      set_caret_position(win_open, 7, -1, get_icon_data_length(win_open, 7));
      break;
  }
}


void create_menu_by_icon (int *menu, int window, int icon)
{
  /* open the menu in the proper place next to a menu icon */
  struct wimp_geticonstate_block gisblock;
  struct wimp_getwindowstate_block gwsblock;

  gisblock.window_handle = window;
  gisblock.icon_handle = icon;
  _swi (Wimp_GetIconState, _IN(1), (int) &gisblock);

  gwsblock.window_handle = window;
  _swi (Wimp_GetWindowState, _IN(1), (int) &gwsblock);

  _swi(Wimp_CreateMenu, _INR(1,3), menu,
       gwsblock.min.x + gwsblock.scroll.x + gisblock.max.x,
       gwsblock.max.y + gwsblock.scroll.y + gisblock.max.y);
}
