/*
 * Nettle zapgen code
 * (C) Nettle developers 2000-2001
 * $Id$
 */


#include "generic.h"
#include "globals.h"
#include "nettle.h"
#include "zapredraw.h"

struct term_char
{
  char fg, bg, flags, chr;
};

#define REDRAW_FLAGS_MASK (NETTLE_FLAG_INVERTED | NETTLE_FLAG_SELECTED)

/* These used to be functions, and were fine in gcc... */
/* ...but Norcroft doesn't do inlines in C!! :-(      */

#define ZAP_WRITE_MULTIBYTE(write, chr)             \
{                                  		    \
  *write++ = 0;                    		    \
  *write++ = 3;                    		    \
  *write++ = (char) (chr);         		    \
  *write++ = (char) ((chr) >> 8);  		    \
}

#define ZAP_WRITE_CHAR(write, input)                \
{                                         	    \
  if (input->flags & NETTLE_FLAG_PLUS100) 	    \
  {                                       	    \
    ZAP_WRITE_MULTIBYTE(write, input->chr | 0x100); \
  }                                                 \
  else                                              \
  {                                                 \
    *write++ = input->chr;                          \
    if (!input->chr)                                \
      *write++ = 0;                                 \
  }                                                 \
}


char *
zapgen_code (int *output_buffer, const char *input_buffer,
	     int width, int height, int session_flags)
{
  int *line_offsets = output_buffer;
  char *write = (char *)(line_offsets + height + 1);
  const struct term_char *input = (const struct term_char *)(const void *) input_buffer;

  /* offsets -> list of offsets of lines (in the data block) */
  /* write -> next location at which to place data in the output buffer */

  for (; height; --height)
  {
    int loop = width;
    int current_bg = -1;
    int current_fg = -1;
    int current_flags = 0;

    *line_offsets++ = write - ((char *) output_buffer);

    for (; loop; --loop)
    {
      if (input->fg != current_fg || input->bg != current_bg ||
        (input->flags & REDRAW_FLAGS_MASK) != current_flags)
      {
        /* yes, I'd like this to be an inline function, but Norcroft can't do it!! */

        register char colour_type;
        char fg = input->fg;
        char bg = input->bg;
        char flags = input->flags & REDRAW_FLAGS_MASK;

        if (((input->flags & NETTLE_FLAG_INVERTED) != 0) ^
            ((input->flags & NETTLE_FLAG_SELECTED) != 0))
        {
          /* swap foreground and background if inverted or selected, not both */
          fg ^= bg;
          bg ^= fg;
          fg ^= bg;
        }

        *write++ = 0;
        colour_type = (fg == current_fg) ? 7 /* bg only if fg unchanged */
        	    : (bg == current_bg) ? 6 /* fg only if bg unchanged */
        	    : 1;                     /* both if neither unchanged */
        *write++ = colour_type;

        if (colour_type != 7)
          *write++ = fg;

        if (colour_type != 6)
          *write++ = bg;

        /* save the current settings */
        current_fg = fg;
        current_bg = bg;
        current_flags = flags;
      }

      if (input->flags & NETTLE_FLAG_CURSOR)
      {
	/* drawing the cursor... */
	*write++ = 0;
	*write++ = 8;		/* cursor merge */
	*write++ = input->bg;   /* foreground colour */
	*write++ = ((input->bg & 2) ? 0 : 7) | (8 & ~input->bg);
				/* contrasting background, inverted bright */
	ZAP_WRITE_CHAR(write, input);

	if (input->flags & NETTLE_FLAG_NO_INPUT)
	{
	  ZAP_WRITE_MULTIBYTE(write, 0x101); /* square cursor */
	}
	else
	  *write++ = 0x7F;	/* block cursor */
      }
      else
	ZAP_WRITE_CHAR(write, input);

      input++;
    }

    *write++ = 0;
    *write++ = 2;		/* end of line marker */
  }
  *line_offsets = 0;

  return write;			/* return ptr to the first unused byte */
}
