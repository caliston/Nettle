/* sockwatch.c
 *
 * Generic interface functions for Dickon's socket watcher module
 *
 * (C) Joseph Heenan, 1998.
 *
 * $Id$
 *
 */

#include <stdio.h>

/* UnixLib doesn't give you the RISC OS socket handle,
   it's an internal file handle, so we need to get at it. */

#ifdef __UNIXLIB_TYPES_H
#define __UNIXLIB_INTERNALS
#include <unixlib/unix.h>
#endif


#include "kernel.h"
#include "swis.h"

#include "sockwatch.h"

int *socketwatch_pollword = NULL;

#define SocketWatch_Register      0x52280
#define SocketWatch_Deregister    0x52281
#define SocketWatch_AtomicReset   0x52282
#define SocketWatch_AllocPW       0x52283
#define SocketWatch_DeallocPW     0x52284

void socketwatch_register(int socket)
{
  const unsigned int bitmask = 1;
  
#ifdef __UNIXLIB_TYPES_H
  socket = (int)__u->fd[socket].handle;
#endif

  if (socketwatch_pollword)
    _swi(SocketWatch_Register, _INR(0,2),
           socketwatch_pollword, bitmask, socket);
}

void socketwatch_deregister(int socket)
{
#ifdef __UNIXLIB_TYPES_H
  socket = (int)__u->fd[socket].handle;
#endif

  if (socketwatch_pollword)
    _swi(SocketWatch_Deregister, _INR(0,1), socket, socketwatch_pollword);
}

void socketwatch_initialise(void)
{
  _kernel_oserror *e;
  
  e = _swix(SocketWatch_AllocPW, _OUT(0), &socketwatch_pollword);
  if (e)
  {
    socketwatch_pollword = NULL;
    fprintf(stderr, "Socketwatch could not be initialised (%s), "
            "will use null polls instead\n", e->errmess);
  }
  else
  {
    *socketwatch_pollword = 0;
  }
}

void socketwatch_finalise(void)
{
  if (socketwatch_pollword)
  {
    _swi(SocketWatch_DeallocPW, _IN(0), socketwatch_pollword);
    socketwatch_pollword = NULL;
  }
}
